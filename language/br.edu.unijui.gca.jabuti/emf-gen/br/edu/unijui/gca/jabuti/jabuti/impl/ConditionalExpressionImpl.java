/**
 * generated by Xtext 2.28.0
 */
package br.edu.unijui.gca.jabuti.jabuti.impl;

import br.edu.unijui.gca.jabuti.jabuti.ComparisonOperator;
import br.edu.unijui.gca.jabuti.jabuti.ConditionalExpression;
import br.edu.unijui.gca.jabuti.jabuti.ExpressionTerm;
import br.edu.unijui.gca.jabuti.jabuti.JabutiPackage;
import br.edu.unijui.gca.jabuti.jabuti.LogicalOperator;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Conditional Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link br.edu.unijui.gca.jabuti.jabuti.impl.ConditionalExpressionImpl#getExpressionTerm <em>Expression Term</em>}</li>
 *   <li>{@link br.edu.unijui.gca.jabuti.jabuti.impl.ConditionalExpressionImpl#getAfterSymbol <em>After Symbol</em>}</li>
 *   <li>{@link br.edu.unijui.gca.jabuti.jabuti.impl.ConditionalExpressionImpl#getBeforeSymbol <em>Before Symbol</em>}</li>
 *   <li>{@link br.edu.unijui.gca.jabuti.jabuti.impl.ConditionalExpressionImpl#getComparisonOperator <em>Comparison Operator</em>}</li>
 *   <li>{@link br.edu.unijui.gca.jabuti.jabuti.impl.ConditionalExpressionImpl#getLogicalOperator <em>Logical Operator</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConditionalExpressionImpl extends MinimalEObjectImpl.Container implements ConditionalExpression
{
	/**
	 * The cached value of the '{@link #getExpressionTerm() <em>Expression Term</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getExpressionTerm()
	 * @generated
	 * @ordered
	 */
	protected ExpressionTerm expressionTerm;

	/**
	 * The cached value of the '{@link #getAfterSymbol() <em>After Symbol</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getAfterSymbol()
	 * @generated
	 * @ordered
	 */
	protected LogicalOperator afterSymbol;

	/**
	 * The cached value of the '{@link #getBeforeSymbol() <em>Before Symbol</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getBeforeSymbol()
	 * @generated
	 * @ordered
	 */
	protected LogicalOperator beforeSymbol;

	/**
	 * The cached value of the '{@link #getComparisonOperator() <em>Comparison Operator</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getComparisonOperator()
	 * @generated
	 * @ordered
	 */
	protected EList<ComparisonOperator> comparisonOperator;

	/**
	 * The cached value of the '{@link #getLogicalOperator() <em>Logical Operator</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getLogicalOperator()
	 * @generated
	 * @ordered
	 */
	protected EList<LogicalOperator> logicalOperator;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionalExpressionImpl()
	{
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass()
	{
		return JabutiPackage.Literals.CONDITIONAL_EXPRESSION;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ExpressionTerm getExpressionTerm()
	{
		return expressionTerm;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetExpressionTerm(ExpressionTerm newExpressionTerm, NotificationChain msgs)
	{
		ExpressionTerm oldExpressionTerm = expressionTerm;
		expressionTerm = newExpressionTerm;
		if (eNotificationRequired())
		{
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JabutiPackage.CONDITIONAL_EXPRESSION__EXPRESSION_TERM, oldExpressionTerm, newExpressionTerm);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setExpressionTerm(ExpressionTerm newExpressionTerm)
	{
		if (newExpressionTerm != expressionTerm)
		{
			NotificationChain msgs = null;
			if (expressionTerm != null)
				msgs = ((InternalEObject)expressionTerm).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JabutiPackage.CONDITIONAL_EXPRESSION__EXPRESSION_TERM, null, msgs);
			if (newExpressionTerm != null)
				msgs = ((InternalEObject)newExpressionTerm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JabutiPackage.CONDITIONAL_EXPRESSION__EXPRESSION_TERM, null, msgs);
			msgs = basicSetExpressionTerm(newExpressionTerm, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, JabutiPackage.CONDITIONAL_EXPRESSION__EXPRESSION_TERM, newExpressionTerm, newExpressionTerm));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public LogicalOperator getAfterSymbol()
	{
		return afterSymbol;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetAfterSymbol(LogicalOperator newAfterSymbol, NotificationChain msgs)
	{
		LogicalOperator oldAfterSymbol = afterSymbol;
		afterSymbol = newAfterSymbol;
		if (eNotificationRequired())
		{
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JabutiPackage.CONDITIONAL_EXPRESSION__AFTER_SYMBOL, oldAfterSymbol, newAfterSymbol);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setAfterSymbol(LogicalOperator newAfterSymbol)
	{
		if (newAfterSymbol != afterSymbol)
		{
			NotificationChain msgs = null;
			if (afterSymbol != null)
				msgs = ((InternalEObject)afterSymbol).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JabutiPackage.CONDITIONAL_EXPRESSION__AFTER_SYMBOL, null, msgs);
			if (newAfterSymbol != null)
				msgs = ((InternalEObject)newAfterSymbol).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JabutiPackage.CONDITIONAL_EXPRESSION__AFTER_SYMBOL, null, msgs);
			msgs = basicSetAfterSymbol(newAfterSymbol, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, JabutiPackage.CONDITIONAL_EXPRESSION__AFTER_SYMBOL, newAfterSymbol, newAfterSymbol));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public LogicalOperator getBeforeSymbol()
	{
		return beforeSymbol;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetBeforeSymbol(LogicalOperator newBeforeSymbol, NotificationChain msgs)
	{
		LogicalOperator oldBeforeSymbol = beforeSymbol;
		beforeSymbol = newBeforeSymbol;
		if (eNotificationRequired())
		{
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JabutiPackage.CONDITIONAL_EXPRESSION__BEFORE_SYMBOL, oldBeforeSymbol, newBeforeSymbol);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setBeforeSymbol(LogicalOperator newBeforeSymbol)
	{
		if (newBeforeSymbol != beforeSymbol)
		{
			NotificationChain msgs = null;
			if (beforeSymbol != null)
				msgs = ((InternalEObject)beforeSymbol).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JabutiPackage.CONDITIONAL_EXPRESSION__BEFORE_SYMBOL, null, msgs);
			if (newBeforeSymbol != null)
				msgs = ((InternalEObject)newBeforeSymbol).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JabutiPackage.CONDITIONAL_EXPRESSION__BEFORE_SYMBOL, null, msgs);
			msgs = basicSetBeforeSymbol(newBeforeSymbol, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, JabutiPackage.CONDITIONAL_EXPRESSION__BEFORE_SYMBOL, newBeforeSymbol, newBeforeSymbol));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<ComparisonOperator> getComparisonOperator()
	{
		if (comparisonOperator == null)
		{
			comparisonOperator = new EObjectContainmentEList<ComparisonOperator>(ComparisonOperator.class, this, JabutiPackage.CONDITIONAL_EXPRESSION__COMPARISON_OPERATOR);
		}
		return comparisonOperator;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<LogicalOperator> getLogicalOperator()
	{
		if (logicalOperator == null)
		{
			logicalOperator = new EObjectContainmentEList<LogicalOperator>(LogicalOperator.class, this, JabutiPackage.CONDITIONAL_EXPRESSION__LOGICAL_OPERATOR);
		}
		return logicalOperator;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
	{
		switch (featureID)
		{
			case JabutiPackage.CONDITIONAL_EXPRESSION__EXPRESSION_TERM:
				return basicSetExpressionTerm(null, msgs);
			case JabutiPackage.CONDITIONAL_EXPRESSION__AFTER_SYMBOL:
				return basicSetAfterSymbol(null, msgs);
			case JabutiPackage.CONDITIONAL_EXPRESSION__BEFORE_SYMBOL:
				return basicSetBeforeSymbol(null, msgs);
			case JabutiPackage.CONDITIONAL_EXPRESSION__COMPARISON_OPERATOR:
				return ((InternalEList<?>)getComparisonOperator()).basicRemove(otherEnd, msgs);
			case JabutiPackage.CONDITIONAL_EXPRESSION__LOGICAL_OPERATOR:
				return ((InternalEList<?>)getLogicalOperator()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType)
	{
		switch (featureID)
		{
			case JabutiPackage.CONDITIONAL_EXPRESSION__EXPRESSION_TERM:
				return getExpressionTerm();
			case JabutiPackage.CONDITIONAL_EXPRESSION__AFTER_SYMBOL:
				return getAfterSymbol();
			case JabutiPackage.CONDITIONAL_EXPRESSION__BEFORE_SYMBOL:
				return getBeforeSymbol();
			case JabutiPackage.CONDITIONAL_EXPRESSION__COMPARISON_OPERATOR:
				return getComparisonOperator();
			case JabutiPackage.CONDITIONAL_EXPRESSION__LOGICAL_OPERATOR:
				return getLogicalOperator();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue)
	{
		switch (featureID)
		{
			case JabutiPackage.CONDITIONAL_EXPRESSION__EXPRESSION_TERM:
				setExpressionTerm((ExpressionTerm)newValue);
				return;
			case JabutiPackage.CONDITIONAL_EXPRESSION__AFTER_SYMBOL:
				setAfterSymbol((LogicalOperator)newValue);
				return;
			case JabutiPackage.CONDITIONAL_EXPRESSION__BEFORE_SYMBOL:
				setBeforeSymbol((LogicalOperator)newValue);
				return;
			case JabutiPackage.CONDITIONAL_EXPRESSION__COMPARISON_OPERATOR:
				getComparisonOperator().clear();
				getComparisonOperator().addAll((Collection<? extends ComparisonOperator>)newValue);
				return;
			case JabutiPackage.CONDITIONAL_EXPRESSION__LOGICAL_OPERATOR:
				getLogicalOperator().clear();
				getLogicalOperator().addAll((Collection<? extends LogicalOperator>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID)
	{
		switch (featureID)
		{
			case JabutiPackage.CONDITIONAL_EXPRESSION__EXPRESSION_TERM:
				setExpressionTerm((ExpressionTerm)null);
				return;
			case JabutiPackage.CONDITIONAL_EXPRESSION__AFTER_SYMBOL:
				setAfterSymbol((LogicalOperator)null);
				return;
			case JabutiPackage.CONDITIONAL_EXPRESSION__BEFORE_SYMBOL:
				setBeforeSymbol((LogicalOperator)null);
				return;
			case JabutiPackage.CONDITIONAL_EXPRESSION__COMPARISON_OPERATOR:
				getComparisonOperator().clear();
				return;
			case JabutiPackage.CONDITIONAL_EXPRESSION__LOGICAL_OPERATOR:
				getLogicalOperator().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID)
	{
		switch (featureID)
		{
			case JabutiPackage.CONDITIONAL_EXPRESSION__EXPRESSION_TERM:
				return expressionTerm != null;
			case JabutiPackage.CONDITIONAL_EXPRESSION__AFTER_SYMBOL:
				return afterSymbol != null;
			case JabutiPackage.CONDITIONAL_EXPRESSION__BEFORE_SYMBOL:
				return beforeSymbol != null;
			case JabutiPackage.CONDITIONAL_EXPRESSION__COMPARISON_OPERATOR:
				return comparisonOperator != null && !comparisonOperator.isEmpty();
			case JabutiPackage.CONDITIONAL_EXPRESSION__LOGICAL_OPERATOR:
				return logicalOperator != null && !logicalOperator.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //ConditionalExpressionImpl
