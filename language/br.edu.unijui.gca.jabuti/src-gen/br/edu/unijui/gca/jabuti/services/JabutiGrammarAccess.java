/*
 * generated by Xtext 2.31.0
 */
package br.edu.unijui.gca.jabuti.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class JabutiGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cContractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContractContractParserRuleCall_1_0 = (RuleCall)cContractAssignment_1.eContents().get(0);
		
		//Model:
		//    imports+=Import*
		//    contract=Contract;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=Import*
		//contract=Contract
		public Group getGroup() { return cGroup; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }
		
		//contract=Contract
		public Assignment getContractAssignment_1() { return cContractAssignment_1; }
		
		//Contract
		public RuleCall getContractContractParserRuleCall_1_0() { return cContractContractParserRuleCall_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//    'import' importedNamespace=QualifiedNameWithWildcard
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class ContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.Contract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDatesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cBeginDateKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBeginDateAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBeginDateSTRINGTerminalRuleCall_7_0 = (RuleCall)cBeginDateAssignment_7.eContents().get(0);
		private final Keyword cDueDateKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cDueDateAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cDueDateSTRINGTerminalRuleCall_10_0 = (RuleCall)cDueDateAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cPartiesKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cLeftCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cApplicationAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cApplicationApplicationParserRuleCall_14_0 = (RuleCall)cApplicationAssignment_14.eContents().get(0);
		private final Assignment cProcessAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cProcessProcessParserRuleCall_15_0 = (RuleCall)cProcessAssignment_15.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Group cGroup_17 = (Group)cGroup.eContents().get(17);
		private final Keyword cVariablesKeyword_17_0 = (Keyword)cGroup_17.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_17_1 = (Keyword)cGroup_17.eContents().get(1);
		private final Assignment cVariablesAssignment_17_2 = (Assignment)cGroup_17.eContents().get(2);
		private final RuleCall cVariablesVariableParserRuleCall_17_2_0 = (RuleCall)cVariablesAssignment_17_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_17_3 = (Keyword)cGroup_17.eContents().get(3);
		private final Keyword cClausesKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Keyword cLeftCurlyBracketKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Assignment cClausesAssignment_20 = (Assignment)cGroup.eContents().get(20);
		private final RuleCall cClausesClauseParserRuleCall_20_0 = (RuleCall)cClausesAssignment_20.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_21 = (Keyword)cGroup.eContents().get(21);
		private final Keyword cRightCurlyBracketKeyword_22 = (Keyword)cGroup.eContents().get(22);
		
		//// #################### CONTRACT STRUCTURE ####################
		//Contract:
		//    "contract" name=ID '{'
		//        'dates' '{'
		//            'beginDate' '=' beginDate=STRING
		//            'dueDate' '=' dueDate=STRING
		//        '}'
		//        'parties' '{'
		//                application=Application
		//                process=Process
		//        '}'
		//        ('variables' '{'
		//            variables+=Variable*
		//        '}')?
		//        'clauses' '{'
		//            clauses+=Clause*
		//        '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//"contract" name=ID '{'
		//    'dates' '{'
		//        'beginDate' '=' beginDate=STRING
		//        'dueDate' '=' dueDate=STRING
		//    '}'
		//    'parties' '{'
		//            application=Application
		//            process=Process
		//    '}'
		//    ('variables' '{'
		//        variables+=Variable*
		//    '}')?
		//    'clauses' '{'
		//        clauses+=Clause*
		//    '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//"contract"
		public Keyword getContractKeyword_0() { return cContractKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'dates'
		public Keyword getDatesKeyword_3() { return cDatesKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//'beginDate'
		public Keyword getBeginDateKeyword_5() { return cBeginDateKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//beginDate=STRING
		public Assignment getBeginDateAssignment_7() { return cBeginDateAssignment_7; }
		
		//STRING
		public RuleCall getBeginDateSTRINGTerminalRuleCall_7_0() { return cBeginDateSTRINGTerminalRuleCall_7_0; }
		
		//'dueDate'
		public Keyword getDueDateKeyword_8() { return cDueDateKeyword_8; }
		
		//'='
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }
		
		//dueDate=STRING
		public Assignment getDueDateAssignment_10() { return cDueDateAssignment_10; }
		
		//STRING
		public RuleCall getDueDateSTRINGTerminalRuleCall_10_0() { return cDueDateSTRINGTerminalRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
		
		//'parties'
		public Keyword getPartiesKeyword_12() { return cPartiesKeyword_12; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_13() { return cLeftCurlyBracketKeyword_13; }
		
		//application=Application
		public Assignment getApplicationAssignment_14() { return cApplicationAssignment_14; }
		
		//Application
		public RuleCall getApplicationApplicationParserRuleCall_14_0() { return cApplicationApplicationParserRuleCall_14_0; }
		
		//process=Process
		public Assignment getProcessAssignment_15() { return cProcessAssignment_15; }
		
		//Process
		public RuleCall getProcessProcessParserRuleCall_15_0() { return cProcessProcessParserRuleCall_15_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }
		
		//('variables' '{'
		//    variables+=Variable*
		//'}')?
		public Group getGroup_17() { return cGroup_17; }
		
		//'variables'
		public Keyword getVariablesKeyword_17_0() { return cVariablesKeyword_17_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_17_1() { return cLeftCurlyBracketKeyword_17_1; }
		
		//variables+=Variable*
		public Assignment getVariablesAssignment_17_2() { return cVariablesAssignment_17_2; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_17_2_0() { return cVariablesVariableParserRuleCall_17_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_17_3() { return cRightCurlyBracketKeyword_17_3; }
		
		//'clauses'
		public Keyword getClausesKeyword_18() { return cClausesKeyword_18; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_19() { return cLeftCurlyBracketKeyword_19; }
		
		//clauses+=Clause*
		public Assignment getClausesAssignment_20() { return cClausesAssignment_20; }
		
		//Clause
		public RuleCall getClausesClauseParserRuleCall_20_0() { return cClausesClauseParserRuleCall_20_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_21() { return cRightCurlyBracketKeyword_21; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_22() { return cRightCurlyBracketKeyword_22; }
	}
	public class ClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.Clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cRightParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cProhibitionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cObligationParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRolePlayerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRolePlayerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRolePlayerRolePlayerEnumRuleCall_4_0 = (RuleCall)cRolePlayerAssignment_4.eContents().get(0);
		private final Keyword cOperationKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOperationAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOperationOperationEnumRuleCall_7_0 = (RuleCall)cOperationAssignment_7.eContents().get(0);
		private final Keyword cTermsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cTermsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cTermsTermsParserRuleCall_10_0 = (RuleCall)cTermsAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cEventLogAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cEventLogEventLogParserRuleCall_12_0 = (RuleCall)cEventLogAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//// #################### CLAUSE STRUCTURE AND CLAUSE SUBTYPES ####################
		//Clause:
		//    (Right | Prohibition | Obligation) '{'
		//        'rolePlayer' '=' rolePlayer=RolePlayer
		//        'operation' '=' operation=Operation
		//        'terms' '{'
		//            terms = Terms
		//        '}'
		//        eventLog+=EventLog*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(Right | Prohibition | Obligation) '{'
		//    'rolePlayer' '=' rolePlayer=RolePlayer
		//    'operation' '=' operation=Operation
		//    'terms' '{'
		//        terms = Terms
		//    '}'
		//    eventLog+=EventLog*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//(Right | Prohibition | Obligation)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Right
		public RuleCall getRightParserRuleCall_0_0() { return cRightParserRuleCall_0_0; }
		
		//Prohibition
		public RuleCall getProhibitionParserRuleCall_0_1() { return cProhibitionParserRuleCall_0_1; }
		
		//Obligation
		public RuleCall getObligationParserRuleCall_0_2() { return cObligationParserRuleCall_0_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'rolePlayer'
		public Keyword getRolePlayerKeyword_2() { return cRolePlayerKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//rolePlayer=RolePlayer
		public Assignment getRolePlayerAssignment_4() { return cRolePlayerAssignment_4; }
		
		//RolePlayer
		public RuleCall getRolePlayerRolePlayerEnumRuleCall_4_0() { return cRolePlayerRolePlayerEnumRuleCall_4_0; }
		
		//'operation'
		public Keyword getOperationKeyword_5() { return cOperationKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//operation=Operation
		public Assignment getOperationAssignment_7() { return cOperationAssignment_7; }
		
		//Operation
		public RuleCall getOperationOperationEnumRuleCall_7_0() { return cOperationOperationEnumRuleCall_7_0; }
		
		//'terms'
		public Keyword getTermsKeyword_8() { return cTermsKeyword_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }
		
		//terms = Terms
		public Assignment getTermsAssignment_10() { return cTermsAssignment_10; }
		
		//Terms
		public RuleCall getTermsTermsParserRuleCall_10_0() { return cTermsTermsParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
		
		//eventLog+=EventLog*
		public Assignment getEventLogAssignment_12() { return cEventLogAssignment_12; }
		
		//EventLog
		public RuleCall getEventLogEventLogParserRuleCall_12_0() { return cEventLogEventLogParserRuleCall_12_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class RightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.Right");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Right:
		//    'right'  name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'right'  name=ID
		public Group getGroup() { return cGroup; }
		
		//'right'
		public Keyword getRightKeyword_0() { return cRightKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ObligationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.Obligation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObligationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Obligation:
		//    'obligation'   name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'obligation'   name=ID
		public Group getGroup() { return cGroup; }
		
		//'obligation'
		public Keyword getObligationKeyword_0() { return cObligationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ProhibitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.Prohibition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProhibitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Prohibition:
		//    'prohibition'  name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'prohibition'  name=ID
		public Group getGroup() { return cGroup; }
		
		//'prohibition'
		public Keyword getProhibitionKeyword_0() { return cProhibitionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class PartyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.Party");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cApplicationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// #################### PARTY AND SUBTYPES ####################
		//Party:
		//    (Application | Process)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(Application | Process)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Application
		public RuleCall getApplicationParserRuleCall_0() { return cApplicationParserRuleCall_0; }
		
		//Process
		public RuleCall getProcessParserRuleCall_1() { return cProcessParserRuleCall_1; }
	}
	public class ApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.Application");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApplicationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Application:
		//    'application' '=' name=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'application' '=' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'application'
		public Keyword getApplicationKeyword_0() { return cApplicationKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
	}
	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Process:
		//    'process' '=' name=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'process' '=' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'process'
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
	}
	public class EventLogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.EventLog");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOnSuccessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOnBreachParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// #################### EventLog onBreach and onSuccess ####################
		//EventLog:
		//    OnSuccess | OnBreach
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OnSuccess | OnBreach
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OnSuccess
		public RuleCall getOnSuccessParserRuleCall_0() { return cOnSuccessParserRuleCall_0; }
		
		//OnBreach
		public RuleCall getOnBreachParserRuleCall_1() { return cOnBreachParserRuleCall_1; }
	}
	public class OnSuccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.OnSuccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnSuccessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLogKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMessageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMessageSTRINGTerminalRuleCall_3_0 = (RuleCall)cMessageAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OnSuccess:
		//    'onSuccess' '(' 'log(' message=STRING ')' ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'onSuccess' '(' 'log(' message=STRING ')' ')'
		public Group getGroup() { return cGroup; }
		
		//'onSuccess'
		public Keyword getOnSuccessKeyword_0() { return cOnSuccessKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'log('
		public Keyword getLogKeyword_2() { return cLogKeyword_2; }
		
		//message=STRING
		public Assignment getMessageAssignment_3() { return cMessageAssignment_3; }
		
		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_3_0() { return cMessageSTRINGTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class OnBreachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.OnBreach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnBreachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLogKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMessageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMessageSTRINGTerminalRuleCall_3_0 = (RuleCall)cMessageAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OnBreach:
		//     'onBreach' '(' 'log(' message=STRING ')' ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'onBreach' '(' 'log(' message=STRING ')' ')'
		public Group getGroup() { return cGroup; }
		
		//'onBreach'
		public Keyword getOnBreachKeyword_0() { return cOnBreachKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'log('
		public Keyword getLogKeyword_2() { return cLogKeyword_2; }
		
		//message=STRING
		public Assignment getMessageAssignment_3() { return cMessageAssignment_3; }
		
		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_3_0() { return cMessageSTRINGTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNegationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperatorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cSymbolAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cSymbolANDKeyword_1_1_0_0 = (Keyword)cSymbolAssignment_1_1_0.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cSymbolORKeyword_1_1_1_0 = (Keyword)cSymbolAssignment_1_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNegationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// #################### EXPRESSION GROUP - CLASSES AND SUBCLASSES ####################
		//Expression:
		//    Negation ({BinaryOperator.left=current} (symbol='AND' | symbol='OR'  ) right=Negation)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Negation ({BinaryOperator.left=current} (symbol='AND' | symbol='OR'  ) right=Negation)*
		public Group getGroup() { return cGroup; }
		
		//Negation
		public RuleCall getNegationParserRuleCall_0() { return cNegationParserRuleCall_0; }
		
		//({BinaryOperator.left=current} (symbol='AND' | symbol='OR'  ) right=Negation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0() { return cBinaryOperatorLeftAction_1_0; }
		
		//(symbol='AND' | symbol='OR'  )
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//symbol='AND'
		public Assignment getSymbolAssignment_1_1_0() { return cSymbolAssignment_1_1_0; }
		
		//'AND'
		public Keyword getSymbolANDKeyword_1_1_0_0() { return cSymbolANDKeyword_1_1_0_0; }
		
		//symbol='OR'
		public Assignment getSymbolAssignment_1_1_1() { return cSymbolAssignment_1_1_1; }
		
		//'OR'
		public Keyword getSymbolORKeyword_1_1_1_0() { return cSymbolORKeyword_1_1_1_0; }
		
		//right=Negation
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Negation
		public RuleCall getRightNegationParserRuleCall_1_2_0() { return cRightNegationParserRuleCall_1_2_0; }
	}
	public class NegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.Negation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryOperatorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cSymbolExclamationMarkKeyword_1_1_0 = (Keyword)cSymbolAssignment_1_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionComparisonParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		
		//Negation returns Expression:
		//    Comparison | {UnaryOperator} symbol='!' expression=Comparison;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison | {UnaryOperator} symbol='!' expression=Comparison
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//{UnaryOperator} symbol='!' expression=Comparison
		public Group getGroup_1() { return cGroup_1; }
		
		//{UnaryOperator}
		public Action getUnaryOperatorAction_1_0() { return cUnaryOperatorAction_1_0; }
		
		//symbol='!'
		public Assignment getSymbolAssignment_1_1() { return cSymbolAssignment_1_1; }
		
		//'!'
		public Keyword getSymbolExclamationMarkKeyword_1_1_0() { return cSymbolExclamationMarkKeyword_1_1_0; }
		
		//expression=Comparison
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Comparison
		public RuleCall getExpressionComparisonParserRuleCall_1_2_0() { return cExpressionComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperatorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cSymbolAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cSymbolLessThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cSymbolAssignment_1_1_0.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cSymbolGreaterThanSignEqualsSignKeyword_1_1_1_0 = (Keyword)cSymbolAssignment_1_1_1.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final Keyword cSymbolGreaterThanSignKeyword_1_1_2_0 = (Keyword)cSymbolAssignment_1_1_2.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final Keyword cSymbolLessThanSignKeyword_1_1_3_0 = (Keyword)cSymbolAssignment_1_1_3.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_4 = (Assignment)cAlternatives_1_1.eContents().get(4);
		private final Keyword cSymbolExclamationMarkEqualsSignKeyword_1_1_4_0 = (Keyword)cSymbolAssignment_1_1_4.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_5 = (Assignment)cAlternatives_1_1.eContents().get(5);
		private final Keyword cSymbolEqualsSignEqualsSignKeyword_1_1_5_0 = (Keyword)cSymbolAssignment_1_1_5.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_6 = (Assignment)cAlternatives_1_1.eContents().get(6);
		private final Keyword cSymbolIsKeyword_1_1_6_0 = (Keyword)cSymbolAssignment_1_1_6.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_7 = (Assignment)cAlternatives_1_1.eContents().get(7);
		private final Keyword cSymbolAsKeyword_1_1_7_0 = (Keyword)cSymbolAssignment_1_1_7.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison returns Expression:
		//    Plus ({BinaryOperator.left=current} (symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='
		//    | symbol='==' | symbol='is' | symbol='as') right=Plus)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Plus ({BinaryOperator.left=current} (symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='
		//| symbol='==' | symbol='is' | symbol='as') right=Plus)*
		public Group getGroup() { return cGroup; }
		
		//Plus
		public RuleCall getPlusParserRuleCall_0() { return cPlusParserRuleCall_0; }
		
		//({BinaryOperator.left=current} (symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='
		//   | symbol='==' | symbol='is' | symbol='as') right=Plus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0() { return cBinaryOperatorLeftAction_1_0; }
		
		//(symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='
		//   | symbol='==' | symbol='is' | symbol='as')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//symbol='<='
		public Assignment getSymbolAssignment_1_1_0() { return cSymbolAssignment_1_1_0; }
		
		//'<='
		public Keyword getSymbolLessThanSignEqualsSignKeyword_1_1_0_0() { return cSymbolLessThanSignEqualsSignKeyword_1_1_0_0; }
		
		//symbol='>='
		public Assignment getSymbolAssignment_1_1_1() { return cSymbolAssignment_1_1_1; }
		
		//'>='
		public Keyword getSymbolGreaterThanSignEqualsSignKeyword_1_1_1_0() { return cSymbolGreaterThanSignEqualsSignKeyword_1_1_1_0; }
		
		//symbol='>'
		public Assignment getSymbolAssignment_1_1_2() { return cSymbolAssignment_1_1_2; }
		
		//'>'
		public Keyword getSymbolGreaterThanSignKeyword_1_1_2_0() { return cSymbolGreaterThanSignKeyword_1_1_2_0; }
		
		//symbol='<'
		public Assignment getSymbolAssignment_1_1_3() { return cSymbolAssignment_1_1_3; }
		
		//'<'
		public Keyword getSymbolLessThanSignKeyword_1_1_3_0() { return cSymbolLessThanSignKeyword_1_1_3_0; }
		
		//symbol='!='
		public Assignment getSymbolAssignment_1_1_4() { return cSymbolAssignment_1_1_4; }
		
		//'!='
		public Keyword getSymbolExclamationMarkEqualsSignKeyword_1_1_4_0() { return cSymbolExclamationMarkEqualsSignKeyword_1_1_4_0; }
		
		//symbol='=='
		public Assignment getSymbolAssignment_1_1_5() { return cSymbolAssignment_1_1_5; }
		
		//'=='
		public Keyword getSymbolEqualsSignEqualsSignKeyword_1_1_5_0() { return cSymbolEqualsSignEqualsSignKeyword_1_1_5_0; }
		
		//symbol='is'
		public Assignment getSymbolAssignment_1_1_6() { return cSymbolAssignment_1_1_6; }
		
		//'is'
		public Keyword getSymbolIsKeyword_1_1_6_0() { return cSymbolIsKeyword_1_1_6_0; }
		
		//symbol='as'
		public Assignment getSymbolAssignment_1_1_7() { return cSymbolAssignment_1_1_7; }
		
		//'as'
		public Keyword getSymbolAsKeyword_1_1_7_0() { return cSymbolAsKeyword_1_1_7_0; }
		
		//right=Plus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Plus
		public RuleCall getRightPlusParserRuleCall_1_2_0() { return cRightPlusParserRuleCall_1_2_0; }
	}
	public class PlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.Plus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperatorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightFactorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Plus returns Expression:
		//    Factor ({BinaryOperator.left=current} ('+' | '-') right=Factor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor ({BinaryOperator.left=current} ('+' | '-') right=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//({BinaryOperator.left=current} ('+' | '-') right=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0() { return cBinaryOperatorLeftAction_1_0; }
		
		//('+' | '-')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_1_0() { return cPlusSignKeyword_1_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1_1() { return cHyphenMinusKeyword_1_1_1; }
		
		//right=Factor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Factor
		public RuleCall getRightFactorParserRuleCall_1_2_0() { return cRightFactorParserRuleCall_1_2_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNegativeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperatorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNegativeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Factor returns Expression:
		//    Negative ({BinaryOperator.left=current} ('*' | '/') right=Negative)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Negative ({BinaryOperator.left=current} ('*' | '/') right=Negative)*
		public Group getGroup() { return cGroup; }
		
		//Negative
		public RuleCall getNegativeParserRuleCall_0() { return cNegativeParserRuleCall_0; }
		
		//({BinaryOperator.left=current} ('*' | '/') right=Negative)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0() { return cBinaryOperatorLeftAction_1_0; }
		
		//('*' | '/')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1_0() { return cAsteriskKeyword_1_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1_1() { return cSolidusKeyword_1_1_1; }
		
		//right=Negative
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Negative
		public RuleCall getRightNegativeParserRuleCall_1_2_0() { return cRightNegativeParserRuleCall_1_2_0; }
	}
	public class NegativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.Negative");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryOperatorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		
		//Negative returns Expression:
		//    Primary | {UnaryOperator} '-' expression=Primary;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary | {UnaryOperator} '-' expression=Primary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//{UnaryOperator} '-' expression=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{UnaryOperator}
		public Action getUnaryOperatorAction_1_0() { return cUnaryOperatorAction_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Primary returns Expression:
		//    LiteralValue | '(' Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralValue | '(' Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralValue
		public RuleCall getLiteralValueParserRuleCall_0() { return cLiteralValueParserRuleCall_0; }
		
		//'(' Expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class LiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.LiteralValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//LiteralValue:
		//    NumericValue | StringValue | VariableValue | FunctionCall;
		@Override public ParserRule getRule() { return rule; }
		
		//NumericValue | StringValue | VariableValue | FunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumericValue
		public RuleCall getNumericValueParserRuleCall_0() { return cNumericValueParserRuleCall_0; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_1() { return cStringValueParserRuleCall_1; }
		
		//VariableValue
		public RuleCall getVariableValueParserRuleCall_2() { return cVariableValueParserRuleCall_2; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_3() { return cFunctionCallParserRuleCall_3; }
	}
	public class NumericValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.NumericValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumericValue:
		//    value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//    value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class VariableValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.VariableValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueQualifiedNameParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//VariableValue:
		//    value=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//value=QualifiedName
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//QualifiedName
		public RuleCall getValueQualifiedNameParserRuleCall_0() { return cValueQualifiedNameParserRuleCall_0; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsExpressionParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParamsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_3_1_0 = (RuleCall)cParamsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FunctionCall:
		//    name=QualifiedName '(' params+=Expression (',' params+=Expression)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=QualifiedName '(' params+=Expression (',' params+=Expression)* ')'
		public Group getGroup() { return cGroup; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_0() { return cNameQualifiedNameParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//params+=Expression
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }
		
		//Expression
		public RuleCall getParamsExpressionParserRuleCall_2_0() { return cParamsExpressionParserRuleCall_2_0; }
		
		//(',' params+=Expression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//params+=Expression
		public Assignment getParamsAssignment_3_1() { return cParamsAssignment_3_1; }
		
		//Expression
		public RuleCall getParamsExpressionParserRuleCall_3_1_0() { return cParamsExpressionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionAssignment_2_0.eContents().get(0);
		private final Assignment cTermAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Alternatives cTermAlternatives_2_1_0 = (Alternatives)cTermAssignment_2_1.eContents().get(0);
		private final RuleCall cTermSessionIntervalParserRuleCall_2_1_0_0 = (RuleCall)cTermAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cTermMessageContentParserRuleCall_2_1_0_1 = (RuleCall)cTermAlternatives_2_1_0.eContents().get(1);
		private final RuleCall cTermTimeIntervalParserRuleCall_2_1_0_2 = (RuleCall)cTermAlternatives_2_1_0.eContents().get(2);
		private final RuleCall cTermTimeoutParserRuleCall_2_1_0_3 = (RuleCall)cTermAlternatives_2_1_0.eContents().get(3);
		
		//Variable:
		//    name=ID '=' (expression=Expression | term = (SessionInterval | MessageContent | TimeInterval | Timeout ))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' (expression=Expression | term = (SessionInterval | MessageContent | TimeInterval | Timeout ))
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//(expression=Expression | term = (SessionInterval | MessageContent | TimeInterval | Timeout ))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2_0() { return cExpressionAssignment_2_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0_0() { return cExpressionExpressionParserRuleCall_2_0_0; }
		
		//term = (SessionInterval | MessageContent | TimeInterval | Timeout )
		public Assignment getTermAssignment_2_1() { return cTermAssignment_2_1; }
		
		//(SessionInterval | MessageContent | TimeInterval | Timeout )
		public Alternatives getTermAlternatives_2_1_0() { return cTermAlternatives_2_1_0; }
		
		//SessionInterval
		public RuleCall getTermSessionIntervalParserRuleCall_2_1_0_0() { return cTermSessionIntervalParserRuleCall_2_1_0_0; }
		
		//MessageContent
		public RuleCall getTermMessageContentParserRuleCall_2_1_0_1() { return cTermMessageContentParserRuleCall_2_1_0_1; }
		
		//TimeInterval
		public RuleCall getTermTimeIntervalParserRuleCall_2_1_0_2() { return cTermTimeIntervalParserRuleCall_2_1_0_2; }
		
		//Timeout
		public RuleCall getTermTimeoutParserRuleCall_2_1_0_3() { return cTermTimeoutParserRuleCall_2_1_0_3; }
	}
	public class TermsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.Terms");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExpressionTermAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionTermExpressionTermParserRuleCall_0_0 = (RuleCall)cExpressionTermAssignment_0.eContents().get(0);
		private final Assignment cConditionalExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConditionalExpressionConditionalExpressionParserRuleCall_1_0 = (RuleCall)cConditionalExpressionAssignment_1.eContents().get(0);
		
		////------------------ start of new version ----------------
		//Terms:
		//    (expressionTerm += ExpressionTerm |
		//    conditionalExpression+=ConditionalExpression)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(expressionTerm += ExpressionTerm |
		//conditionalExpression+=ConditionalExpression)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//expressionTerm += ExpressionTerm
		public Assignment getExpressionTermAssignment_0() { return cExpressionTermAssignment_0; }
		
		//ExpressionTerm
		public RuleCall getExpressionTermExpressionTermParserRuleCall_0_0() { return cExpressionTermExpressionTermParserRuleCall_0_0; }
		
		//conditionalExpression+=ConditionalExpression
		public Assignment getConditionalExpressionAssignment_1() { return cConditionalExpressionAssignment_1; }
		
		//ConditionalExpression
		public RuleCall getConditionalExpressionConditionalExpressionParserRuleCall_1_0() { return cConditionalExpressionConditionalExpressionParserRuleCall_1_0; }
	}
	public class ExpressionTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.ExpressionTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNegationTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryTermOperatorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cSymbolAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cSymbolCommaKeyword_1_1_0_0 = (Keyword)cSymbolAssignment_1_1_0.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cSymbolORKeyword_1_1_1_0 = (Keyword)cSymbolAssignment_1_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNegationTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExpressionTerm:
		//    NegationTerm ({BinaryTermOperator.left=current} (symbol=',' | symbol='OR'  ) right=NegationTerm)*;
		@Override public ParserRule getRule() { return rule; }
		
		//NegationTerm ({BinaryTermOperator.left=current} (symbol=',' | symbol='OR'  ) right=NegationTerm)*
		public Group getGroup() { return cGroup; }
		
		//NegationTerm
		public RuleCall getNegationTermParserRuleCall_0() { return cNegationTermParserRuleCall_0; }
		
		//({BinaryTermOperator.left=current} (symbol=',' | symbol='OR'  ) right=NegationTerm)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryTermOperator.left=current}
		public Action getBinaryTermOperatorLeftAction_1_0() { return cBinaryTermOperatorLeftAction_1_0; }
		
		//(symbol=',' | symbol='OR'  )
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//symbol=','
		public Assignment getSymbolAssignment_1_1_0() { return cSymbolAssignment_1_1_0; }
		
		//','
		public Keyword getSymbolCommaKeyword_1_1_0_0() { return cSymbolCommaKeyword_1_1_0_0; }
		
		//symbol='OR'
		public Assignment getSymbolAssignment_1_1_1() { return cSymbolAssignment_1_1_1; }
		
		//'OR'
		public Keyword getSymbolORKeyword_1_1_1_0() { return cSymbolORKeyword_1_1_1_0; }
		
		//right=NegationTerm
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//NegationTerm
		public RuleCall getRightNegationTermParserRuleCall_1_2_0() { return cRightNegationTermParserRuleCall_1_2_0; }
	}
	public class NegationTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.NegationTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryTermOperatorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cSymbolNOTKeyword_1_1_0 = (Keyword)cSymbolAssignment_1_1.eContents().get(0);
		private final Assignment cExpressionTermAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionTermTermParserRuleCall_1_2_0 = (RuleCall)cExpressionTermAssignment_1_2.eContents().get(0);
		
		//NegationTerm returns ExpressionTerm:
		//    Term | {UnaryTermOperator} symbol='NOT' expressionTerm=Term;
		@Override public ParserRule getRule() { return rule; }
		
		//Term | {UnaryTermOperator} symbol='NOT' expressionTerm=Term
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }
		
		//{UnaryTermOperator} symbol='NOT' expressionTerm=Term
		public Group getGroup_1() { return cGroup_1; }
		
		//{UnaryTermOperator}
		public Action getUnaryTermOperatorAction_1_0() { return cUnaryTermOperatorAction_1_0; }
		
		//symbol='NOT'
		public Assignment getSymbolAssignment_1_1() { return cSymbolAssignment_1_1; }
		
		//'NOT'
		public Keyword getSymbolNOTKeyword_1_1_0() { return cSymbolNOTKeyword_1_1_0; }
		
		//expressionTerm=Term
		public Assignment getExpressionTermAssignment_1_2() { return cExpressionTermAssignment_1_2; }
		
		//Term
		public RuleCall getExpressionTermTermParserRuleCall_1_2_0() { return cExpressionTermTermParserRuleCall_1_2_0; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionTermParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cSessionIntervalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWeekDaysIntervalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTimeIntervalParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTimeoutParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMaxNumberOfOperationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMessageContentParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Term returns ExpressionTerm:
		//    '(' ExpressionTerm ')' |
		//    SessionInterval | WeekDaysInterval | TimeInterval | Timeout | MaxNumberOfOperation | MessageContent
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' ExpressionTerm ')' |
		//SessionInterval | WeekDaysInterval | TimeInterval | Timeout | MaxNumberOfOperation | MessageContent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' ExpressionTerm ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//ExpressionTerm
		public RuleCall getExpressionTermParserRuleCall_0_1() { return cExpressionTermParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//SessionInterval
		public RuleCall getSessionIntervalParserRuleCall_1() { return cSessionIntervalParserRuleCall_1; }
		
		//WeekDaysInterval
		public RuleCall getWeekDaysIntervalParserRuleCall_2() { return cWeekDaysIntervalParserRuleCall_2; }
		
		//TimeInterval
		public RuleCall getTimeIntervalParserRuleCall_3() { return cTimeIntervalParserRuleCall_3; }
		
		//Timeout
		public RuleCall getTimeoutParserRuleCall_4() { return cTimeoutParserRuleCall_4; }
		
		//MaxNumberOfOperation
		public RuleCall getMaxNumberOfOperationParserRuleCall_5() { return cMaxNumberOfOperationParserRuleCall_5; }
		
		//MessageContent
		public RuleCall getMessageContentParserRuleCall_6() { return cMessageContentParserRuleCall_6; }
	}
	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBeforeSymbolAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBeforeSymbolLogicalOperatorParserRuleCall_0_0 = (RuleCall)cBeforeSymbolAssignment_0.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final RuleCall cQualifiedNameParserRuleCall_3_0_0 = (RuleCall)cAlternatives_3_0.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_3_0_1 = (RuleCall)cAlternatives_3_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cComparisonOperatorAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cComparisonOperatorComparisonOperatorParserRuleCall_3_1_0_0 = (RuleCall)cComparisonOperatorAssignment_3_1_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1_1 = (Alternatives)cGroup_3_1.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_3_1_1_0 = (RuleCall)cAlternatives_3_1_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_3_1_1_1 = (RuleCall)cAlternatives_3_1_1.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cLogicalOperatorAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cLogicalOperatorLogicalOperatorParserRuleCall_4_0_0 = (RuleCall)cLogicalOperatorAssignment_4_0.eContents().get(0);
		private final RuleCall cQualifiedNameParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Assignment cComparisonOperatorAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cComparisonOperatorComparisonOperatorParserRuleCall_4_2_0_0 = (RuleCall)cComparisonOperatorAssignment_4_2_0.eContents().get(0);
		private final Alternatives cAlternatives_4_2_1 = (Alternatives)cGroup_4_2.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_4_2_1_0 = (RuleCall)cAlternatives_4_2_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_4_2_1_1 = (RuleCall)cAlternatives_4_2_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cCheckKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cExpressionTermAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cExpressionTermExpressionTermParserRuleCall_8_0 = (RuleCall)cExpressionTermAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cAfterSymbolAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cAfterSymbolLogicalOperatorParserRuleCall_10_0 = (RuleCall)cAfterSymbolAssignment_10.eContents().get(0);
		
		//ConditionalExpression :
		//    (beforeSymbol = LogicalOperator)?
		//    'when' '(' ((QualifiedName | STRING )
		//                (comparisonOperator+=ComparisonOperator (QualifiedName | STRING ))?)
		//                (logicalOperator+=LogicalOperator QualifiedName
		//                    (comparisonOperator+=ComparisonOperator (QualifiedName | STRING))?)* ')' 'check' '{'
		//                    expressionTerm=ExpressionTerm
		//    '}'
		//    (afterSymbol = LogicalOperator)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(beforeSymbol = LogicalOperator)?
		//'when' '(' ((QualifiedName | STRING )
		//            (comparisonOperator+=ComparisonOperator (QualifiedName | STRING ))?)
		//            (logicalOperator+=LogicalOperator QualifiedName
		//                (comparisonOperator+=ComparisonOperator (QualifiedName | STRING))?)* ')' 'check' '{'
		//                expressionTerm=ExpressionTerm
		//'}'
		//(afterSymbol = LogicalOperator)?
		public Group getGroup() { return cGroup; }
		
		//(beforeSymbol = LogicalOperator)?
		public Assignment getBeforeSymbolAssignment_0() { return cBeforeSymbolAssignment_0; }
		
		//LogicalOperator
		public RuleCall getBeforeSymbolLogicalOperatorParserRuleCall_0_0() { return cBeforeSymbolLogicalOperatorParserRuleCall_0_0; }
		
		//'when'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//((QualifiedName | STRING )
		//               (comparisonOperator+=ComparisonOperator (QualifiedName | STRING ))?)
		public Group getGroup_3() { return cGroup_3; }
		
		//(QualifiedName | STRING )
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_3_0_0() { return cQualifiedNameParserRuleCall_3_0_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3_0_1() { return cSTRINGTerminalRuleCall_3_0_1; }
		
		//(comparisonOperator+=ComparisonOperator (QualifiedName | STRING ))?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//comparisonOperator+=ComparisonOperator
		public Assignment getComparisonOperatorAssignment_3_1_0() { return cComparisonOperatorAssignment_3_1_0; }
		
		//ComparisonOperator
		public RuleCall getComparisonOperatorComparisonOperatorParserRuleCall_3_1_0_0() { return cComparisonOperatorComparisonOperatorParserRuleCall_3_1_0_0; }
		
		//(QualifiedName | STRING )
		public Alternatives getAlternatives_3_1_1() { return cAlternatives_3_1_1; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_3_1_1_0() { return cQualifiedNameParserRuleCall_3_1_1_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3_1_1_1() { return cSTRINGTerminalRuleCall_3_1_1_1; }
		
		//(logicalOperator+=LogicalOperator QualifiedName
		//    (comparisonOperator+=ComparisonOperator (QualifiedName | STRING))?)*
		public Group getGroup_4() { return cGroup_4; }
		
		//logicalOperator+=LogicalOperator
		public Assignment getLogicalOperatorAssignment_4_0() { return cLogicalOperatorAssignment_4_0; }
		
		//LogicalOperator
		public RuleCall getLogicalOperatorLogicalOperatorParserRuleCall_4_0_0() { return cLogicalOperatorLogicalOperatorParserRuleCall_4_0_0; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_4_1() { return cQualifiedNameParserRuleCall_4_1; }
		
		//(comparisonOperator+=ComparisonOperator (QualifiedName | STRING))?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//comparisonOperator+=ComparisonOperator
		public Assignment getComparisonOperatorAssignment_4_2_0() { return cComparisonOperatorAssignment_4_2_0; }
		
		//ComparisonOperator
		public RuleCall getComparisonOperatorComparisonOperatorParserRuleCall_4_2_0_0() { return cComparisonOperatorComparisonOperatorParserRuleCall_4_2_0_0; }
		
		//(QualifiedName | STRING)
		public Alternatives getAlternatives_4_2_1() { return cAlternatives_4_2_1; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_4_2_1_0() { return cQualifiedNameParserRuleCall_4_2_1_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_4_2_1_1() { return cSTRINGTerminalRuleCall_4_2_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'check'
		public Keyword getCheckKeyword_6() { return cCheckKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//expressionTerm=ExpressionTerm
		public Assignment getExpressionTermAssignment_8() { return cExpressionTermAssignment_8; }
		
		//ExpressionTerm
		public RuleCall getExpressionTermExpressionTermParserRuleCall_8_0() { return cExpressionTermExpressionTermParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
		
		//(afterSymbol = LogicalOperator)?
		public Assignment getAfterSymbolAssignment_10() { return cAfterSymbolAssignment_10; }
		
		//LogicalOperator
		public RuleCall getAfterSymbolLogicalOperatorParserRuleCall_10_0() { return cAfterSymbolLogicalOperatorParserRuleCall_10_0; }
	}
	public class LogicalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.LogicalOperator");
		private final Assignment cSymbolAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cSymbolAlternatives_0 = (Alternatives)cSymbolAssignment.eContents().get(0);
		private final Keyword cSymbolCommaKeyword_0_0 = (Keyword)cSymbolAlternatives_0.eContents().get(0);
		private final Keyword cSymbolANDKeyword_0_1 = (Keyword)cSymbolAlternatives_0.eContents().get(1);
		private final Keyword cSymbolORKeyword_0_2 = (Keyword)cSymbolAlternatives_0.eContents().get(2);
		
		////  ----------------- end new version proposal  -----------------
		//LogicalOperator:
		//    symbol=(',' | 'AND'| 'OR')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//symbol=(',' | 'AND'| 'OR')
		public Assignment getSymbolAssignment() { return cSymbolAssignment; }
		
		//(',' | 'AND'| 'OR')
		public Alternatives getSymbolAlternatives_0() { return cSymbolAlternatives_0; }
		
		//','
		public Keyword getSymbolCommaKeyword_0_0() { return cSymbolCommaKeyword_0_0; }
		
		//'AND'
		public Keyword getSymbolANDKeyword_0_1() { return cSymbolANDKeyword_0_1; }
		
		//'OR'
		public Keyword getSymbolORKeyword_0_2() { return cSymbolORKeyword_0_2; }
	}
	public class TimeIntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.TimeInterval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeIntervalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartSTRINGTerminalRuleCall_2_0 = (RuleCall)cStartAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndSTRINGTerminalRuleCall_4_0 = (RuleCall)cEndAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TimeInterval:
		//    'TimeInterval' '(' start=STRING 'to' end=STRING')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'TimeInterval' '(' start=STRING 'to' end=STRING')'
		public Group getGroup() { return cGroup; }
		
		//'TimeInterval'
		public Keyword getTimeIntervalKeyword_0() { return cTimeIntervalKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//start=STRING
		public Assignment getStartAssignment_2() { return cStartAssignment_2; }
		
		//STRING
		public RuleCall getStartSTRINGTerminalRuleCall_2_0() { return cStartSTRINGTerminalRuleCall_2_0; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//end=STRING
		public Assignment getEndAssignment_4() { return cEndAssignment_4; }
		
		//STRING
		public RuleCall getEndSTRINGTerminalRuleCall_4_0() { return cEndSTRINGTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class SessionIntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.SessionInterval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSessionIntervalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFrequencyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFrequencyINTTerminalRuleCall_2_0 = (RuleCall)cFrequencyAssignment_2.eContents().get(0);
		private final Assignment cTimeUnitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTimeUnitTimeUnitEnumRuleCall_3_0 = (RuleCall)cTimeUnitAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPerKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cMessageContentAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cMessageContentMessageContentParserRuleCall_4_1_0_0 = (RuleCall)cMessageContentAssignment_4_1_0.eContents().get(0);
		private final Assignment cValueAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_4_1_1_0 = (RuleCall)cValueAssignment_4_1_1.eContents().get(0);
		private final RuleCall cQualifiedNameParserRuleCall_4_1_2 = (RuleCall)cAlternatives_4_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SessionInterval:
		//    'SessionInterval' '('frequency=INT timeUnit=TimeUnit ('per' ( messageContent = MessageContent | value=STRING | QualifiedName ) )? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'SessionInterval' '('frequency=INT timeUnit=TimeUnit ('per' ( messageContent = MessageContent | value=STRING | QualifiedName ) )? ')'
		public Group getGroup() { return cGroup; }
		
		//'SessionInterval'
		public Keyword getSessionIntervalKeyword_0() { return cSessionIntervalKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//frequency=INT
		public Assignment getFrequencyAssignment_2() { return cFrequencyAssignment_2; }
		
		//INT
		public RuleCall getFrequencyINTTerminalRuleCall_2_0() { return cFrequencyINTTerminalRuleCall_2_0; }
		
		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_3() { return cTimeUnitAssignment_3; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitEnumRuleCall_3_0() { return cTimeUnitTimeUnitEnumRuleCall_3_0; }
		
		//('per' ( messageContent = MessageContent | value=STRING | QualifiedName ) )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'per'
		public Keyword getPerKeyword_4_0() { return cPerKeyword_4_0; }
		
		//( messageContent = MessageContent | value=STRING | QualifiedName )
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//messageContent = MessageContent
		public Assignment getMessageContentAssignment_4_1_0() { return cMessageContentAssignment_4_1_0; }
		
		//MessageContent
		public RuleCall getMessageContentMessageContentParserRuleCall_4_1_0_0() { return cMessageContentMessageContentParserRuleCall_4_1_0_0; }
		
		//value=STRING
		public Assignment getValueAssignment_4_1_1() { return cValueAssignment_4_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_4_1_1_0() { return cValueSTRINGTerminalRuleCall_4_1_1_0; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_4_1_2() { return cQualifiedNameParserRuleCall_4_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class TimeoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.Timeout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSecondsINTTerminalRuleCall_2_0 = (RuleCall)cSecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Timeout:
		//    'Timeout' '(' seconds=INT ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Timeout' '(' seconds=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'Timeout'
		public Keyword getTimeoutKeyword_0() { return cTimeoutKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//seconds=INT
		public Assignment getSecondsAssignment_2() { return cSecondsAssignment_2; }
		
		//INT
		public RuleCall getSecondsINTTerminalRuleCall_2_0() { return cSecondsINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MaxNumberOfOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.MaxNumberOfOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxNumberOfOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperationsNumberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperationsNumberINTTerminalRuleCall_2_0 = (RuleCall)cOperationsNumberAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPerKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTimeUnitAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTimeUnitTimeUnitEnumRuleCall_3_1_0 = (RuleCall)cTimeUnitAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MaxNumberOfOperation:
		//    'MaxNumberOfOperation' '(' operationsNumber=INT ('per' timeUnit=TimeUnit)?  ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'MaxNumberOfOperation' '(' operationsNumber=INT ('per' timeUnit=TimeUnit)?  ')'
		public Group getGroup() { return cGroup; }
		
		//'MaxNumberOfOperation'
		public Keyword getMaxNumberOfOperationKeyword_0() { return cMaxNumberOfOperationKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//operationsNumber=INT
		public Assignment getOperationsNumberAssignment_2() { return cOperationsNumberAssignment_2; }
		
		//INT
		public RuleCall getOperationsNumberINTTerminalRuleCall_2_0() { return cOperationsNumberINTTerminalRuleCall_2_0; }
		
		//('per' timeUnit=TimeUnit)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'per'
		public Keyword getPerKeyword_3_0() { return cPerKeyword_3_0; }
		
		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_3_1() { return cTimeUnitAssignment_3_1; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitEnumRuleCall_3_1_0() { return cTimeUnitTimeUnitEnumRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class WeekDaysIntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.WeekDaysInterval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWeekDaysIntervalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartWeekDayEnumRuleCall_2_0 = (RuleCall)cStartAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndWeekDayEnumRuleCall_4_0 = (RuleCall)cEndAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//WeekDaysInterval:
		//    'WeekDaysInterval' '(' start=WeekDay 'to' end=WeekDay ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'WeekDaysInterval' '(' start=WeekDay 'to' end=WeekDay ')'
		public Group getGroup() { return cGroup; }
		
		//'WeekDaysInterval'
		public Keyword getWeekDaysIntervalKeyword_0() { return cWeekDaysIntervalKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//start=WeekDay
		public Assignment getStartAssignment_2() { return cStartAssignment_2; }
		
		//WeekDay
		public RuleCall getStartWeekDayEnumRuleCall_2_0() { return cStartWeekDayEnumRuleCall_2_0; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//end=WeekDay
		public Assignment getEndAssignment_4() { return cEndAssignment_4; }
		
		//WeekDay
		public RuleCall getEndWeekDayEnumRuleCall_4_0() { return cEndWeekDayEnumRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class MessageContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.MessageContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMessageContentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cContentAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cContentSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cContentAssignment_2_0.eContents().get(0);
		private final RuleCall cQualifiedNameParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cComparisonOperatorAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cComparisonOperatorComparisonOperatorParserRuleCall_3_0_0 = (RuleCall)cComparisonOperatorAssignment_3_0.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cPerKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cTimeUnitAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cTimeUnitTimeUnitEnumRuleCall_3_2_1_0 = (RuleCall)cTimeUnitAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MessageContent:
		//    'MessageContent' '(' (content=STRING | QualifiedName)
		//    (comparisonOperator=ComparisonOperator expression=Expression ('per' timeUnit=TimeUnit)?)?  ')'
		////    'MessageContent' '(' left=Expression logicalOper=OpLog right=Expression ('per' timeUnit=TimeUnit)?
		////    x (',' x)*
		//// ver sobre o validation. Validar se uma variavel(referencia) foi criada
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'MessageContent' '(' (content=STRING | QualifiedName)
		//(comparisonOperator=ComparisonOperator expression=Expression ('per' timeUnit=TimeUnit)?)?  ')'
		public Group getGroup() { return cGroup; }
		
		//'MessageContent'
		public Keyword getMessageContentKeyword_0() { return cMessageContentKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(content=STRING | QualifiedName)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//content=STRING
		public Assignment getContentAssignment_2_0() { return cContentAssignment_2_0; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_2_0_0() { return cContentSTRINGTerminalRuleCall_2_0_0; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_2_1() { return cQualifiedNameParserRuleCall_2_1; }
		
		//(comparisonOperator=ComparisonOperator expression=Expression ('per' timeUnit=TimeUnit)?)?
		public Group getGroup_3() { return cGroup_3; }
		
		//comparisonOperator=ComparisonOperator
		public Assignment getComparisonOperatorAssignment_3_0() { return cComparisonOperatorAssignment_3_0; }
		
		//ComparisonOperator
		public RuleCall getComparisonOperatorComparisonOperatorParserRuleCall_3_0_0() { return cComparisonOperatorComparisonOperatorParserRuleCall_3_0_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }
		
		//('per' timeUnit=TimeUnit)?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'per'
		public Keyword getPerKeyword_3_2_0() { return cPerKeyword_3_2_0; }
		
		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_3_2_1() { return cTimeUnitAssignment_3_2_1; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitEnumRuleCall_3_2_1_0() { return cTimeUnitTimeUnitEnumRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ComparisonOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSymbolAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cSymbolLessThanSignEqualsSignKeyword_0_0 = (Keyword)cSymbolAssignment_0.eContents().get(0);
		private final Assignment cSymbolAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cSymbolGreaterThanSignEqualsSignKeyword_1_0 = (Keyword)cSymbolAssignment_1.eContents().get(0);
		private final Assignment cSymbolAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cSymbolGreaterThanSignKeyword_2_0 = (Keyword)cSymbolAssignment_2.eContents().get(0);
		private final Assignment cSymbolAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cSymbolLessThanSignKeyword_3_0 = (Keyword)cSymbolAssignment_3.eContents().get(0);
		private final Assignment cSymbolAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cSymbolExclamationMarkEqualsSignKeyword_4_0 = (Keyword)cSymbolAssignment_4.eContents().get(0);
		private final Assignment cSymbolAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cSymbolEqualsSignEqualsSignKeyword_5_0 = (Keyword)cSymbolAssignment_5.eContents().get(0);
		
		//ComparisonOperator:
		//    symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='    | symbol='=='
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='	| symbol='=='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//symbol='<='
		public Assignment getSymbolAssignment_0() { return cSymbolAssignment_0; }
		
		//'<='
		public Keyword getSymbolLessThanSignEqualsSignKeyword_0_0() { return cSymbolLessThanSignEqualsSignKeyword_0_0; }
		
		//symbol='>='
		public Assignment getSymbolAssignment_1() { return cSymbolAssignment_1; }
		
		//'>='
		public Keyword getSymbolGreaterThanSignEqualsSignKeyword_1_0() { return cSymbolGreaterThanSignEqualsSignKeyword_1_0; }
		
		//symbol='>'
		public Assignment getSymbolAssignment_2() { return cSymbolAssignment_2; }
		
		//'>'
		public Keyword getSymbolGreaterThanSignKeyword_2_0() { return cSymbolGreaterThanSignKeyword_2_0; }
		
		//symbol='<'
		public Assignment getSymbolAssignment_3() { return cSymbolAssignment_3; }
		
		//'<'
		public Keyword getSymbolLessThanSignKeyword_3_0() { return cSymbolLessThanSignKeyword_3_0; }
		
		//symbol='!='
		public Assignment getSymbolAssignment_4() { return cSymbolAssignment_4; }
		
		//'!='
		public Keyword getSymbolExclamationMarkEqualsSignKeyword_4_0() { return cSymbolExclamationMarkEqualsSignKeyword_4_0; }
		
		//symbol='=='
		public Assignment getSymbolAssignment_5() { return cSymbolAssignment_5; }
		
		//'=='
		public Keyword getSymbolEqualsSignEqualsSignKeyword_5_0() { return cSymbolEqualsSignEqualsSignKeyword_5_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////############################################
		////por que utilizar um qualifiedName e como ID ?
		//QualifiedName:
		//    ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//    QualifiedName '.*';
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	
	public class RolePlayerElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.RolePlayer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAPPLICATIONEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAPPLICATIONApplicationKeyword_0_0 = (Keyword)cAPPLICATIONEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPROCESSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPROCESSProcessKeyword_1_0 = (Keyword)cPROCESSEnumLiteralDeclaration_1.eContents().get(0);
		
		//// #################### ENUM SECTION ####################
		//enum RolePlayer:
		//    APPLICATION='application' | PROCESS='process'
		//;
		public EnumRule getRule() { return rule; }
		
		//APPLICATION='application' | PROCESS='process'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//APPLICATION='application'
		public EnumLiteralDeclaration getAPPLICATIONEnumLiteralDeclaration_0() { return cAPPLICATIONEnumLiteralDeclaration_0; }
		
		//'application'
		public Keyword getAPPLICATIONApplicationKeyword_0_0() { return cAPPLICATIONApplicationKeyword_0_0; }
		
		//PROCESS='process'
		public EnumLiteralDeclaration getPROCESSEnumLiteralDeclaration_1() { return cPROCESSEnumLiteralDeclaration_1; }
		
		//'process'
		public Keyword getPROCESSProcessKeyword_1_0() { return cPROCESSProcessKeyword_1_0; }
	}
	public class OperationElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUSHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUSHPushKeyword_0_0 = (Keyword)cPUSHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPOLLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPOLLPollKeyword_1_0 = (Keyword)cPOLLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWRITEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWRITEWriteKeyword_2_0 = (Keyword)cWRITEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cREADEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cREADReadKeyword_3_0 = (Keyword)cREADEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cREQUESTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cREQUESTRequestKeyword_4_0 = (Keyword)cREQUESTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cRESPONSEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cRESPONSEResponseKeyword_5_0 = (Keyword)cRESPONSEEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum Operation:
		//    PUSH='push' | POLL='poll' | WRITE='write' | READ = 'read' | REQUEST='request' | RESPONSE='response'
		//;
		public EnumRule getRule() { return rule; }
		
		//PUSH='push' | POLL='poll' | WRITE='write' | READ = 'read' | REQUEST='request' | RESPONSE='response'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PUSH='push'
		public EnumLiteralDeclaration getPUSHEnumLiteralDeclaration_0() { return cPUSHEnumLiteralDeclaration_0; }
		
		//'push'
		public Keyword getPUSHPushKeyword_0_0() { return cPUSHPushKeyword_0_0; }
		
		//POLL='poll'
		public EnumLiteralDeclaration getPOLLEnumLiteralDeclaration_1() { return cPOLLEnumLiteralDeclaration_1; }
		
		//'poll'
		public Keyword getPOLLPollKeyword_1_0() { return cPOLLPollKeyword_1_0; }
		
		//WRITE='write'
		public EnumLiteralDeclaration getWRITEEnumLiteralDeclaration_2() { return cWRITEEnumLiteralDeclaration_2; }
		
		//'write'
		public Keyword getWRITEWriteKeyword_2_0() { return cWRITEWriteKeyword_2_0; }
		
		//READ = 'read'
		public EnumLiteralDeclaration getREADEnumLiteralDeclaration_3() { return cREADEnumLiteralDeclaration_3; }
		
		//'read'
		public Keyword getREADReadKeyword_3_0() { return cREADReadKeyword_3_0; }
		
		//REQUEST='request'
		public EnumLiteralDeclaration getREQUESTEnumLiteralDeclaration_4() { return cREQUESTEnumLiteralDeclaration_4; }
		
		//'request'
		public Keyword getREQUESTRequestKeyword_4_0() { return cREQUESTRequestKeyword_4_0; }
		
		//RESPONSE='response'
		public EnumLiteralDeclaration getRESPONSEEnumLiteralDeclaration_5() { return cRESPONSEEnumLiteralDeclaration_5; }
		
		//'response'
		public Keyword getRESPONSEResponseKeyword_5_0() { return cRESPONSEResponseKeyword_5_0; }
	}
	public class WeekDayElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.WeekDay");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSUNDAYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSUNDAYSundayKeyword_0_0 = (Keyword)cSUNDAYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMONDAYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMONDAYMondayKeyword_1_0 = (Keyword)cMONDAYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTUESDAYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTUESDAYTuesdayKeyword_2_0 = (Keyword)cTUESDAYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWEDNESDAYEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWEDNESDAYWednesdayKeyword_3_0 = (Keyword)cWEDNESDAYEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cTHURSDAYEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cTHURSDAYThursdayKeyword_4_0 = (Keyword)cTHURSDAYEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFRIDAYEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFRIDAYFridayKeyword_5_0 = (Keyword)cFRIDAYEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSATURDAYEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSATURDAYSaturdayKeyword_6_0 = (Keyword)cSATURDAYEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum WeekDay:
		//    SUNDAY='Sunday' | MONDAY='Monday' | TUESDAY='Tuesday' | WEDNESDAY = 'Wednesday' | THURSDAY='Thursday' | FRIDAY='Friday' | SATURDAY='Saturday'
		//;
		public EnumRule getRule() { return rule; }
		
		//SUNDAY='Sunday' | MONDAY='Monday' | TUESDAY='Tuesday' | WEDNESDAY = 'Wednesday' | THURSDAY='Thursday' | FRIDAY='Friday' | SATURDAY='Saturday'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SUNDAY='Sunday'
		public EnumLiteralDeclaration getSUNDAYEnumLiteralDeclaration_0() { return cSUNDAYEnumLiteralDeclaration_0; }
		
		//'Sunday'
		public Keyword getSUNDAYSundayKeyword_0_0() { return cSUNDAYSundayKeyword_0_0; }
		
		//MONDAY='Monday'
		public EnumLiteralDeclaration getMONDAYEnumLiteralDeclaration_1() { return cMONDAYEnumLiteralDeclaration_1; }
		
		//'Monday'
		public Keyword getMONDAYMondayKeyword_1_0() { return cMONDAYMondayKeyword_1_0; }
		
		//TUESDAY='Tuesday'
		public EnumLiteralDeclaration getTUESDAYEnumLiteralDeclaration_2() { return cTUESDAYEnumLiteralDeclaration_2; }
		
		//'Tuesday'
		public Keyword getTUESDAYTuesdayKeyword_2_0() { return cTUESDAYTuesdayKeyword_2_0; }
		
		//WEDNESDAY = 'Wednesday'
		public EnumLiteralDeclaration getWEDNESDAYEnumLiteralDeclaration_3() { return cWEDNESDAYEnumLiteralDeclaration_3; }
		
		//'Wednesday'
		public Keyword getWEDNESDAYWednesdayKeyword_3_0() { return cWEDNESDAYWednesdayKeyword_3_0; }
		
		//THURSDAY='Thursday'
		public EnumLiteralDeclaration getTHURSDAYEnumLiteralDeclaration_4() { return cTHURSDAYEnumLiteralDeclaration_4; }
		
		//'Thursday'
		public Keyword getTHURSDAYThursdayKeyword_4_0() { return cTHURSDAYThursdayKeyword_4_0; }
		
		//FRIDAY='Friday'
		public EnumLiteralDeclaration getFRIDAYEnumLiteralDeclaration_5() { return cFRIDAYEnumLiteralDeclaration_5; }
		
		//'Friday'
		public Keyword getFRIDAYFridayKeyword_5_0() { return cFRIDAYFridayKeyword_5_0; }
		
		//SATURDAY='Saturday'
		public EnumLiteralDeclaration getSATURDAYEnumLiteralDeclaration_6() { return cSATURDAYEnumLiteralDeclaration_6; }
		
		//'Saturday'
		public Keyword getSATURDAYSaturdayKeyword_6_0() { return cSATURDAYSaturdayKeyword_6_0; }
	}
	public class TimeUnitElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.jabuti.Jabuti.TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSECONDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSECONDSecondKeyword_0_0 = (Keyword)cSECONDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUTEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUTEMinuteKeyword_1_0 = (Keyword)cMINUTEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHOUREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHOURHourKeyword_2_0 = (Keyword)cHOUREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDAYEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDAYDayKeyword_3_0 = (Keyword)cDAYEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cWEEKEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cWEEKWeekKeyword_4_0 = (Keyword)cWEEKEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cMONTHEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cMONTHMonthKeyword_5_0 = (Keyword)cMONTHEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cYEAREnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cYEARYearKeyword_6_0 = (Keyword)cYEAREnumLiteralDeclaration_6.eContents().get(0);
		
		//enum TimeUnit:
		//    SECOND='Second' |  MINUTE='Minute' | HOUR = 'Hour' |  DAY='Day' | WEEK='Week' | MONTH='Month' | YEAR='Year'
		//;
		public EnumRule getRule() { return rule; }
		
		//SECOND='Second' |  MINUTE='Minute' | HOUR = 'Hour' |  DAY='Day' | WEEK='Week' | MONTH='Month' | YEAR='Year'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SECOND='Second'
		public EnumLiteralDeclaration getSECONDEnumLiteralDeclaration_0() { return cSECONDEnumLiteralDeclaration_0; }
		
		//'Second'
		public Keyword getSECONDSecondKeyword_0_0() { return cSECONDSecondKeyword_0_0; }
		
		//MINUTE='Minute'
		public EnumLiteralDeclaration getMINUTEEnumLiteralDeclaration_1() { return cMINUTEEnumLiteralDeclaration_1; }
		
		//'Minute'
		public Keyword getMINUTEMinuteKeyword_1_0() { return cMINUTEMinuteKeyword_1_0; }
		
		//HOUR = 'Hour'
		public EnumLiteralDeclaration getHOUREnumLiteralDeclaration_2() { return cHOUREnumLiteralDeclaration_2; }
		
		//'Hour'
		public Keyword getHOURHourKeyword_2_0() { return cHOURHourKeyword_2_0; }
		
		//DAY='Day'
		public EnumLiteralDeclaration getDAYEnumLiteralDeclaration_3() { return cDAYEnumLiteralDeclaration_3; }
		
		//'Day'
		public Keyword getDAYDayKeyword_3_0() { return cDAYDayKeyword_3_0; }
		
		//WEEK='Week'
		public EnumLiteralDeclaration getWEEKEnumLiteralDeclaration_4() { return cWEEKEnumLiteralDeclaration_4; }
		
		//'Week'
		public Keyword getWEEKWeekKeyword_4_0() { return cWEEKWeekKeyword_4_0; }
		
		//MONTH='Month'
		public EnumLiteralDeclaration getMONTHEnumLiteralDeclaration_5() { return cMONTHEnumLiteralDeclaration_5; }
		
		//'Month'
		public Keyword getMONTHMonthKeyword_5_0() { return cMONTHMonthKeyword_5_0; }
		
		//YEAR='Year'
		public EnumLiteralDeclaration getYEAREnumLiteralDeclaration_6() { return cYEAREnumLiteralDeclaration_6; }
		
		//'Year'
		public Keyword getYEARYearKeyword_6_0() { return cYEARYearKeyword_6_0; }
	}
	
	private final ModelElements pModel;
	private final ImportElements pImport;
	private final ContractElements pContract;
	private final ClauseElements pClause;
	private final RightElements pRight;
	private final ObligationElements pObligation;
	private final ProhibitionElements pProhibition;
	private final PartyElements pParty;
	private final ApplicationElements pApplication;
	private final ProcessElements pProcess;
	private final EventLogElements pEventLog;
	private final OnSuccessElements pOnSuccess;
	private final OnBreachElements pOnBreach;
	private final ExpressionElements pExpression;
	private final NegationElements pNegation;
	private final ComparisonElements pComparison;
	private final PlusElements pPlus;
	private final FactorElements pFactor;
	private final NegativeElements pNegative;
	private final PrimaryElements pPrimary;
	private final LiteralValueElements pLiteralValue;
	private final NumericValueElements pNumericValue;
	private final StringValueElements pStringValue;
	private final VariableValueElements pVariableValue;
	private final FunctionCallElements pFunctionCall;
	private final VariableElements pVariable;
	private final TermsElements pTerms;
	private final ExpressionTermElements pExpressionTerm;
	private final NegationTermElements pNegationTerm;
	private final TermElements pTerm;
	private final ConditionalExpressionElements pConditionalExpression;
	private final LogicalOperatorElements pLogicalOperator;
	private final TimeIntervalElements pTimeInterval;
	private final SessionIntervalElements pSessionInterval;
	private final TimeoutElements pTimeout;
	private final MaxNumberOfOperationElements pMaxNumberOfOperation;
	private final WeekDaysIntervalElements pWeekDaysInterval;
	private final MessageContentElements pMessageContent;
	private final ComparisonOperatorElements pComparisonOperator;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final RolePlayerElements eRolePlayer;
	private final OperationElements eOperation;
	private final WeekDayElements eWeekDay;
	private final TimeUnitElements eTimeUnit;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JabutiGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pImport = new ImportElements();
		this.pContract = new ContractElements();
		this.pClause = new ClauseElements();
		this.pRight = new RightElements();
		this.pObligation = new ObligationElements();
		this.pProhibition = new ProhibitionElements();
		this.pParty = new PartyElements();
		this.pApplication = new ApplicationElements();
		this.pProcess = new ProcessElements();
		this.pEventLog = new EventLogElements();
		this.pOnSuccess = new OnSuccessElements();
		this.pOnBreach = new OnBreachElements();
		this.pExpression = new ExpressionElements();
		this.pNegation = new NegationElements();
		this.pComparison = new ComparisonElements();
		this.pPlus = new PlusElements();
		this.pFactor = new FactorElements();
		this.pNegative = new NegativeElements();
		this.pPrimary = new PrimaryElements();
		this.pLiteralValue = new LiteralValueElements();
		this.pNumericValue = new NumericValueElements();
		this.pStringValue = new StringValueElements();
		this.pVariableValue = new VariableValueElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pVariable = new VariableElements();
		this.pTerms = new TermsElements();
		this.pExpressionTerm = new ExpressionTermElements();
		this.pNegationTerm = new NegationTermElements();
		this.pTerm = new TermElements();
		this.pConditionalExpression = new ConditionalExpressionElements();
		this.pLogicalOperator = new LogicalOperatorElements();
		this.pTimeInterval = new TimeIntervalElements();
		this.pSessionInterval = new SessionIntervalElements();
		this.pTimeout = new TimeoutElements();
		this.pMaxNumberOfOperation = new MaxNumberOfOperationElements();
		this.pWeekDaysInterval = new WeekDaysIntervalElements();
		this.pMessageContent = new MessageContentElements();
		this.pComparisonOperator = new ComparisonOperatorElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.eRolePlayer = new RolePlayerElements();
		this.eOperation = new OperationElements();
		this.eWeekDay = new WeekDayElements();
		this.eTimeUnit = new TimeUnitElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.edu.unijui.gca.jabuti.Jabuti".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    imports+=Import*
	//    contract=Contract;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Import:
	//    'import' importedNamespace=QualifiedNameWithWildcard
	//;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//// #################### CONTRACT STRUCTURE ####################
	//Contract:
	//    "contract" name=ID '{'
	//        'dates' '{'
	//            'beginDate' '=' beginDate=STRING
	//            'dueDate' '=' dueDate=STRING
	//        '}'
	//        'parties' '{'
	//                application=Application
	//                process=Process
	//        '}'
	//        ('variables' '{'
	//            variables+=Variable*
	//        '}')?
	//        'clauses' '{'
	//            clauses+=Clause*
	//        '}'
	//    '}';
	public ContractElements getContractAccess() {
		return pContract;
	}
	
	public ParserRule getContractRule() {
		return getContractAccess().getRule();
	}
	
	//// #################### CLAUSE STRUCTURE AND CLAUSE SUBTYPES ####################
	//Clause:
	//    (Right | Prohibition | Obligation) '{'
	//        'rolePlayer' '=' rolePlayer=RolePlayer
	//        'operation' '=' operation=Operation
	//        'terms' '{'
	//            terms = Terms
	//        '}'
	//        eventLog+=EventLog*
	//    '}'
	//;
	public ClauseElements getClauseAccess() {
		return pClause;
	}
	
	public ParserRule getClauseRule() {
		return getClauseAccess().getRule();
	}
	
	//Right:
	//    'right'  name=ID
	//;
	public RightElements getRightAccess() {
		return pRight;
	}
	
	public ParserRule getRightRule() {
		return getRightAccess().getRule();
	}
	
	//Obligation:
	//    'obligation'   name=ID
	//;
	public ObligationElements getObligationAccess() {
		return pObligation;
	}
	
	public ParserRule getObligationRule() {
		return getObligationAccess().getRule();
	}
	
	//Prohibition:
	//    'prohibition'  name=ID
	//;
	public ProhibitionElements getProhibitionAccess() {
		return pProhibition;
	}
	
	public ParserRule getProhibitionRule() {
		return getProhibitionAccess().getRule();
	}
	
	//// #################### PARTY AND SUBTYPES ####################
	//Party:
	//    (Application | Process)
	//;
	public PartyElements getPartyAccess() {
		return pParty;
	}
	
	public ParserRule getPartyRule() {
		return getPartyAccess().getRule();
	}
	
	//Application:
	//    'application' '=' name=STRING
	//;
	public ApplicationElements getApplicationAccess() {
		return pApplication;
	}
	
	public ParserRule getApplicationRule() {
		return getApplicationAccess().getRule();
	}
	
	//Process:
	//    'process' '=' name=STRING
	//;
	public ProcessElements getProcessAccess() {
		return pProcess;
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}
	
	//// #################### EventLog onBreach and onSuccess ####################
	//EventLog:
	//    OnSuccess | OnBreach
	//;
	public EventLogElements getEventLogAccess() {
		return pEventLog;
	}
	
	public ParserRule getEventLogRule() {
		return getEventLogAccess().getRule();
	}
	
	//OnSuccess:
	//    'onSuccess' '(' 'log(' message=STRING ')' ')'
	//;
	public OnSuccessElements getOnSuccessAccess() {
		return pOnSuccess;
	}
	
	public ParserRule getOnSuccessRule() {
		return getOnSuccessAccess().getRule();
	}
	
	//OnBreach:
	//     'onBreach' '(' 'log(' message=STRING ')' ')'
	//;
	public OnBreachElements getOnBreachAccess() {
		return pOnBreach;
	}
	
	public ParserRule getOnBreachRule() {
		return getOnBreachAccess().getRule();
	}
	
	//// #################### EXPRESSION GROUP - CLASSES AND SUBCLASSES ####################
	//Expression:
	//    Negation ({BinaryOperator.left=current} (symbol='AND' | symbol='OR'  ) right=Negation)*
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Negation returns Expression:
	//    Comparison | {UnaryOperator} symbol='!' expression=Comparison;
	public NegationElements getNegationAccess() {
		return pNegation;
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}
	
	//Comparison returns Expression:
	//    Plus ({BinaryOperator.left=current} (symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='
	//    | symbol='==' | symbol='is' | symbol='as') right=Plus)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//Plus returns Expression:
	//    Factor ({BinaryOperator.left=current} ('+' | '-') right=Factor)*;
	public PlusElements getPlusAccess() {
		return pPlus;
	}
	
	public ParserRule getPlusRule() {
		return getPlusAccess().getRule();
	}
	
	//Factor returns Expression:
	//    Negative ({BinaryOperator.left=current} ('*' | '/') right=Negative)*;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//Negative returns Expression:
	//    Primary | {UnaryOperator} '-' expression=Primary;
	public NegativeElements getNegativeAccess() {
		return pNegative;
	}
	
	public ParserRule getNegativeRule() {
		return getNegativeAccess().getRule();
	}
	
	//Primary returns Expression:
	//    LiteralValue | '(' Expression ')';
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//LiteralValue:
	//    NumericValue | StringValue | VariableValue | FunctionCall;
	public LiteralValueElements getLiteralValueAccess() {
		return pLiteralValue;
	}
	
	public ParserRule getLiteralValueRule() {
		return getLiteralValueAccess().getRule();
	}
	
	//NumericValue:
	//    value=INT;
	public NumericValueElements getNumericValueAccess() {
		return pNumericValue;
	}
	
	public ParserRule getNumericValueRule() {
		return getNumericValueAccess().getRule();
	}
	
	//StringValue:
	//    value=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//VariableValue:
	//    value=QualifiedName;
	public VariableValueElements getVariableValueAccess() {
		return pVariableValue;
	}
	
	public ParserRule getVariableValueRule() {
		return getVariableValueAccess().getRule();
	}
	
	//FunctionCall:
	//    name=QualifiedName '(' params+=Expression (',' params+=Expression)* ')'
	//;
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//Variable:
	//    name=ID '=' (expression=Expression | term = (SessionInterval | MessageContent | TimeInterval | Timeout ))
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	////------------------ start of new version ----------------
	//Terms:
	//    (expressionTerm += ExpressionTerm |
	//    conditionalExpression+=ConditionalExpression)+
	//;
	public TermsElements getTermsAccess() {
		return pTerms;
	}
	
	public ParserRule getTermsRule() {
		return getTermsAccess().getRule();
	}
	
	//ExpressionTerm:
	//    NegationTerm ({BinaryTermOperator.left=current} (symbol=',' | symbol='OR'  ) right=NegationTerm)*;
	public ExpressionTermElements getExpressionTermAccess() {
		return pExpressionTerm;
	}
	
	public ParserRule getExpressionTermRule() {
		return getExpressionTermAccess().getRule();
	}
	
	//NegationTerm returns ExpressionTerm:
	//    Term | {UnaryTermOperator} symbol='NOT' expressionTerm=Term;
	public NegationTermElements getNegationTermAccess() {
		return pNegationTerm;
	}
	
	public ParserRule getNegationTermRule() {
		return getNegationTermAccess().getRule();
	}
	
	//Term returns ExpressionTerm:
	//    '(' ExpressionTerm ')' |
	//    SessionInterval | WeekDaysInterval | TimeInterval | Timeout | MaxNumberOfOperation | MessageContent
	//;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//ConditionalExpression :
	//    (beforeSymbol = LogicalOperator)?
	//    'when' '(' ((QualifiedName | STRING )
	//                (comparisonOperator+=ComparisonOperator (QualifiedName | STRING ))?)
	//                (logicalOperator+=LogicalOperator QualifiedName
	//                    (comparisonOperator+=ComparisonOperator (QualifiedName | STRING))?)* ')' 'check' '{'
	//                    expressionTerm=ExpressionTerm
	//    '}'
	//    (afterSymbol = LogicalOperator)?
	//;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return pConditionalExpression;
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	////  ----------------- end new version proposal  -----------------
	//LogicalOperator:
	//    symbol=(',' | 'AND'| 'OR')
	//;
	public LogicalOperatorElements getLogicalOperatorAccess() {
		return pLogicalOperator;
	}
	
	public ParserRule getLogicalOperatorRule() {
		return getLogicalOperatorAccess().getRule();
	}
	
	//TimeInterval:
	//    'TimeInterval' '(' start=STRING 'to' end=STRING')'
	//;
	public TimeIntervalElements getTimeIntervalAccess() {
		return pTimeInterval;
	}
	
	public ParserRule getTimeIntervalRule() {
		return getTimeIntervalAccess().getRule();
	}
	
	//SessionInterval:
	//    'SessionInterval' '('frequency=INT timeUnit=TimeUnit ('per' ( messageContent = MessageContent | value=STRING | QualifiedName ) )? ')'
	//;
	public SessionIntervalElements getSessionIntervalAccess() {
		return pSessionInterval;
	}
	
	public ParserRule getSessionIntervalRule() {
		return getSessionIntervalAccess().getRule();
	}
	
	//Timeout:
	//    'Timeout' '(' seconds=INT ')'
	//;
	public TimeoutElements getTimeoutAccess() {
		return pTimeout;
	}
	
	public ParserRule getTimeoutRule() {
		return getTimeoutAccess().getRule();
	}
	
	//MaxNumberOfOperation:
	//    'MaxNumberOfOperation' '(' operationsNumber=INT ('per' timeUnit=TimeUnit)?  ')'
	//;
	public MaxNumberOfOperationElements getMaxNumberOfOperationAccess() {
		return pMaxNumberOfOperation;
	}
	
	public ParserRule getMaxNumberOfOperationRule() {
		return getMaxNumberOfOperationAccess().getRule();
	}
	
	//WeekDaysInterval:
	//    'WeekDaysInterval' '(' start=WeekDay 'to' end=WeekDay ')'
	//;
	public WeekDaysIntervalElements getWeekDaysIntervalAccess() {
		return pWeekDaysInterval;
	}
	
	public ParserRule getWeekDaysIntervalRule() {
		return getWeekDaysIntervalAccess().getRule();
	}
	
	//MessageContent:
	//    'MessageContent' '(' (content=STRING | QualifiedName)
	//    (comparisonOperator=ComparisonOperator expression=Expression ('per' timeUnit=TimeUnit)?)?  ')'
	////    'MessageContent' '(' left=Expression logicalOper=OpLog right=Expression ('per' timeUnit=TimeUnit)?
	////    x (',' x)*
	//// ver sobre o validation. Validar se uma variavel(referencia) foi criada
	//;
	public MessageContentElements getMessageContentAccess() {
		return pMessageContent;
	}
	
	public ParserRule getMessageContentRule() {
		return getMessageContentAccess().getRule();
	}
	
	//ComparisonOperator:
	//    symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='    | symbol='=='
	//;
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return pComparisonOperator;
	}
	
	public ParserRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}
	
	////############################################
	////por que utilizar um qualifiedName e como ID ?
	//QualifiedName:
	//    ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//    QualifiedName '.*';
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//// #################### ENUM SECTION ####################
	//enum RolePlayer:
	//    APPLICATION='application' | PROCESS='process'
	//;
	public RolePlayerElements getRolePlayerAccess() {
		return eRolePlayer;
	}
	
	public EnumRule getRolePlayerRule() {
		return getRolePlayerAccess().getRule();
	}
	
	//enum Operation:
	//    PUSH='push' | POLL='poll' | WRITE='write' | READ = 'read' | REQUEST='request' | RESPONSE='response'
	//;
	public OperationElements getOperationAccess() {
		return eOperation;
	}
	
	public EnumRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//enum WeekDay:
	//    SUNDAY='Sunday' | MONDAY='Monday' | TUESDAY='Tuesday' | WEDNESDAY = 'Wednesday' | THURSDAY='Thursday' | FRIDAY='Friday' | SATURDAY='Saturday'
	//;
	public WeekDayElements getWeekDayAccess() {
		return eWeekDay;
	}
	
	public EnumRule getWeekDayRule() {
		return getWeekDayAccess().getRule();
	}
	
	//enum TimeUnit:
	//    SECOND='Second' |  MINUTE='Minute' | HOUR = 'Hour' |  DAY='Day' | WEEK='Week' | MONTH='Month' | YEAR='Year'
	//;
	public TimeUnitElements getTimeUnitAccess() {
		return eTimeUnit;
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
