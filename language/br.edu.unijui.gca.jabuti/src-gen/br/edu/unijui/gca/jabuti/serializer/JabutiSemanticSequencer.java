/*
 * generated by Xtext 2.31.0
 */
package br.edu.unijui.gca.jabuti.serializer;

import br.edu.unijui.gca.jabuti.jabuti.Application;
import br.edu.unijui.gca.jabuti.jabuti.BinaryOperator;
import br.edu.unijui.gca.jabuti.jabuti.BinaryTermOperator;
import br.edu.unijui.gca.jabuti.jabuti.ComparisonOperator;
import br.edu.unijui.gca.jabuti.jabuti.ConditionalExpression;
import br.edu.unijui.gca.jabuti.jabuti.Contract;
import br.edu.unijui.gca.jabuti.jabuti.FunctionCall;
import br.edu.unijui.gca.jabuti.jabuti.Import;
import br.edu.unijui.gca.jabuti.jabuti.JabutiPackage;
import br.edu.unijui.gca.jabuti.jabuti.LogicalOperator;
import br.edu.unijui.gca.jabuti.jabuti.MaxNumberOfOperation;
import br.edu.unijui.gca.jabuti.jabuti.MessageContent;
import br.edu.unijui.gca.jabuti.jabuti.Model;
import br.edu.unijui.gca.jabuti.jabuti.NumericValue;
import br.edu.unijui.gca.jabuti.jabuti.Obligation;
import br.edu.unijui.gca.jabuti.jabuti.OnBreach;
import br.edu.unijui.gca.jabuti.jabuti.OnSuccess;
import br.edu.unijui.gca.jabuti.jabuti.Prohibition;
import br.edu.unijui.gca.jabuti.jabuti.Right;
import br.edu.unijui.gca.jabuti.jabuti.SessionInterval;
import br.edu.unijui.gca.jabuti.jabuti.StringValue;
import br.edu.unijui.gca.jabuti.jabuti.Terms;
import br.edu.unijui.gca.jabuti.jabuti.TimeInterval;
import br.edu.unijui.gca.jabuti.jabuti.Timeout;
import br.edu.unijui.gca.jabuti.jabuti.UnaryOperator;
import br.edu.unijui.gca.jabuti.jabuti.UnaryTermOperator;
import br.edu.unijui.gca.jabuti.jabuti.Variable;
import br.edu.unijui.gca.jabuti.jabuti.VariableValue;
import br.edu.unijui.gca.jabuti.jabuti.WeekDaysInterval;
import br.edu.unijui.gca.jabuti.services.JabutiGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class JabutiSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private JabutiGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == JabutiPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JabutiPackage.APPLICATION:
				sequence_Application(context, (Application) semanticObject); 
				return; 
			case JabutiPackage.BINARY_OPERATOR:
				sequence_Comparison_Expression_Factor_Plus(context, (BinaryOperator) semanticObject); 
				return; 
			case JabutiPackage.BINARY_TERM_OPERATOR:
				sequence_ExpressionTerm(context, (BinaryTermOperator) semanticObject); 
				return; 
			case JabutiPackage.COMPARISON_OPERATOR:
				sequence_ComparisonOperator(context, (ComparisonOperator) semanticObject); 
				return; 
			case JabutiPackage.CONDITIONAL_EXPRESSION:
				sequence_ConditionalExpression(context, (ConditionalExpression) semanticObject); 
				return; 
			case JabutiPackage.CONTRACT:
				sequence_Contract(context, (Contract) semanticObject); 
				return; 
			case JabutiPackage.FUNCTION_CALL:
				sequence_FunctionCall(context, (FunctionCall) semanticObject); 
				return; 
			case JabutiPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case JabutiPackage.LOGICAL_OPERATOR:
				sequence_LogicalOperator(context, (LogicalOperator) semanticObject); 
				return; 
			case JabutiPackage.MAX_NUMBER_OF_OPERATION:
				sequence_MaxNumberOfOperation(context, (MaxNumberOfOperation) semanticObject); 
				return; 
			case JabutiPackage.MESSAGE_CONTENT:
				sequence_MessageContent(context, (MessageContent) semanticObject); 
				return; 
			case JabutiPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case JabutiPackage.NUMERIC_VALUE:
				sequence_NumericValue(context, (NumericValue) semanticObject); 
				return; 
			case JabutiPackage.OBLIGATION:
				if (rule == grammarAccess.getClauseRule()) {
					sequence_Clause_Obligation(context, (Obligation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getObligationRule()) {
					sequence_Obligation(context, (Obligation) semanticObject); 
					return; 
				}
				else break;
			case JabutiPackage.ON_BREACH:
				sequence_OnBreach(context, (OnBreach) semanticObject); 
				return; 
			case JabutiPackage.ON_SUCCESS:
				sequence_OnSuccess(context, (OnSuccess) semanticObject); 
				return; 
			case JabutiPackage.PROCESS:
				sequence_Process(context, (br.edu.unijui.gca.jabuti.jabuti.Process) semanticObject); 
				return; 
			case JabutiPackage.PROHIBITION:
				if (rule == grammarAccess.getClauseRule()) {
					sequence_Clause_Prohibition(context, (Prohibition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getProhibitionRule()) {
					sequence_Prohibition(context, (Prohibition) semanticObject); 
					return; 
				}
				else break;
			case JabutiPackage.RIGHT:
				if (rule == grammarAccess.getClauseRule()) {
					sequence_Clause_Right(context, (Right) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRightRule()) {
					sequence_Right(context, (Right) semanticObject); 
					return; 
				}
				else break;
			case JabutiPackage.SESSION_INTERVAL:
				sequence_SessionInterval(context, (SessionInterval) semanticObject); 
				return; 
			case JabutiPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			case JabutiPackage.TERMS:
				sequence_Terms(context, (Terms) semanticObject); 
				return; 
			case JabutiPackage.TIME_INTERVAL:
				sequence_TimeInterval(context, (TimeInterval) semanticObject); 
				return; 
			case JabutiPackage.TIMEOUT:
				sequence_Timeout(context, (Timeout) semanticObject); 
				return; 
			case JabutiPackage.UNARY_OPERATOR:
				sequence_Negation_Negative(context, (UnaryOperator) semanticObject); 
				return; 
			case JabutiPackage.UNARY_TERM_OPERATOR:
				sequence_NegationTerm(context, (UnaryTermOperator) semanticObject); 
				return; 
			case JabutiPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case JabutiPackage.VARIABLE_VALUE:
				sequence_VariableValue(context, (VariableValue) semanticObject); 
				return; 
			case JabutiPackage.WEEK_DAYS_INTERVAL:
				sequence_WeekDaysInterval(context, (WeekDaysInterval) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Party returns Application
	 *     Application returns Application
	 *
	 * Constraint:
	 *     name=STRING
	 * </pre>
	 */
	protected void sequence_Application(ISerializationContext context, Application semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.PARTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.PARTY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getApplicationAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Clause returns Obligation
	 *
	 * Constraint:
	 *     (name=ID rolePlayer=RolePlayer operation=Operation terms=Terms eventLog+=EventLog*)
	 * </pre>
	 */
	protected void sequence_Clause_Obligation(ISerializationContext context, Obligation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Clause returns Prohibition
	 *
	 * Constraint:
	 *     (name=ID rolePlayer=RolePlayer operation=Operation terms=Terms eventLog+=EventLog*)
	 * </pre>
	 */
	protected void sequence_Clause_Prohibition(ISerializationContext context, Prohibition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Clause returns Right
	 *
	 * Constraint:
	 *     (name=ID rolePlayer=RolePlayer operation=Operation terms=Terms eventLog+=EventLog*)
	 * </pre>
	 */
	protected void sequence_Clause_Right(ISerializationContext context, Right semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ComparisonOperator returns ComparisonOperator
	 *
	 * Constraint:
	 *     (
	 *         symbol='&lt;=' | 
	 *         symbol='&gt;=' | 
	 *         symbol='&gt;' | 
	 *         symbol='&lt;' | 
	 *         symbol='!=' | 
	 *         symbol='=='
	 *     )
	 * </pre>
	 */
	protected void sequence_ComparisonOperator(ISerializationContext context, ComparisonOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns BinaryOperator
	 *     Expression.BinaryOperator_1_0 returns BinaryOperator
	 *     Negation returns BinaryOperator
	 *     Comparison returns BinaryOperator
	 *     Comparison.BinaryOperator_1_0 returns BinaryOperator
	 *     Plus returns BinaryOperator
	 *     Plus.BinaryOperator_1_0 returns BinaryOperator
	 *     Factor returns BinaryOperator
	 *     Factor.BinaryOperator_1_0 returns BinaryOperator
	 *     Negative returns BinaryOperator
	 *     Primary returns BinaryOperator
	 *
	 * Constraint:
	 *     (
	 *         (left=Expression_BinaryOperator_1_0 (symbol='AND' | symbol='OR') right=Negation) | 
	 *         (
	 *             left=Comparison_BinaryOperator_1_0 
	 *             (
	 *                 symbol='&lt;=' | 
	 *                 symbol='&gt;=' | 
	 *                 symbol='&gt;' | 
	 *                 symbol='&lt;' | 
	 *                 symbol='!=' | 
	 *                 symbol='==' | 
	 *                 symbol='is' | 
	 *                 symbol='as'
	 *             ) 
	 *             right=Plus
	 *         ) | 
	 *         (left=Plus_BinaryOperator_1_0 right=Factor) | 
	 *         (left=Factor_BinaryOperator_1_0 right=Negative)
	 *     )
	 * </pre>
	 */
	protected void sequence_Comparison_Expression_Factor_Plus(ISerializationContext context, BinaryOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConditionalExpression returns ConditionalExpression
	 *
	 * Constraint:
	 *     (
	 *         beforeSymbol=LogicalOperator? 
	 *         comparisonOperator+=ComparisonOperator? 
	 *         (logicalOperator+=LogicalOperator comparisonOperator+=ComparisonOperator?)* 
	 *         expressionTerm=ExpressionTerm 
	 *         afterSymbol=LogicalOperator?
	 *     )
	 * </pre>
	 */
	protected void sequence_ConditionalExpression(ISerializationContext context, ConditionalExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Contract returns Contract
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         beginDate=STRING 
	 *         dueDate=STRING 
	 *         application=Application 
	 *         process=Process 
	 *         variables+=Variable* 
	 *         clauses+=Clause*
	 *     )
	 * </pre>
	 */
	protected void sequence_Contract(ISerializationContext context, Contract semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExpressionTerm returns BinaryTermOperator
	 *     ExpressionTerm.BinaryTermOperator_1_0 returns BinaryTermOperator
	 *     NegationTerm returns BinaryTermOperator
	 *     Term returns BinaryTermOperator
	 *
	 * Constraint:
	 *     (left=ExpressionTerm_BinaryTermOperator_1_0 (symbol=',' | symbol='OR') right=NegationTerm)
	 * </pre>
	 */
	protected void sequence_ExpressionTerm(ISerializationContext context, BinaryTermOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns FunctionCall
	 *     Expression.BinaryOperator_1_0 returns FunctionCall
	 *     Negation returns FunctionCall
	 *     Comparison returns FunctionCall
	 *     Comparison.BinaryOperator_1_0 returns FunctionCall
	 *     Plus returns FunctionCall
	 *     Plus.BinaryOperator_1_0 returns FunctionCall
	 *     Factor returns FunctionCall
	 *     Factor.BinaryOperator_1_0 returns FunctionCall
	 *     Negative returns FunctionCall
	 *     Primary returns FunctionCall
	 *     LiteralValue returns FunctionCall
	 *     FunctionCall returns FunctionCall
	 *
	 * Constraint:
	 *     (name=QualifiedName params+=Expression params+=Expression*)
	 * </pre>
	 */
	protected void sequence_FunctionCall(ISerializationContext context, FunctionCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     importedNamespace=QualifiedNameWithWildcard
	 * </pre>
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.IMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LogicalOperator returns LogicalOperator
	 *
	 * Constraint:
	 *     (symbol=',' | symbol='AND' | symbol='OR')
	 * </pre>
	 */
	protected void sequence_LogicalOperator(ISerializationContext context, LogicalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExpressionTerm returns MaxNumberOfOperation
	 *     ExpressionTerm.BinaryTermOperator_1_0 returns MaxNumberOfOperation
	 *     NegationTerm returns MaxNumberOfOperation
	 *     Term returns MaxNumberOfOperation
	 *     MaxNumberOfOperation returns MaxNumberOfOperation
	 *
	 * Constraint:
	 *     (operationsNumber=INT timeUnit=TimeUnit?)
	 * </pre>
	 */
	protected void sequence_MaxNumberOfOperation(ISerializationContext context, MaxNumberOfOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExpressionTerm returns MessageContent
	 *     ExpressionTerm.BinaryTermOperator_1_0 returns MessageContent
	 *     NegationTerm returns MessageContent
	 *     Term returns MessageContent
	 *     MessageContent returns MessageContent
	 *
	 * Constraint:
	 *     (content=STRING | (content=STRING comparisonOperator=ComparisonOperator expression=Expression timeUnit=TimeUnit?))?
	 * </pre>
	 */
	protected void sequence_MessageContent(ISerializationContext context, MessageContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (imports+=Import* contract=Contract)
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExpressionTerm returns UnaryTermOperator
	 *     ExpressionTerm.BinaryTermOperator_1_0 returns UnaryTermOperator
	 *     NegationTerm returns UnaryTermOperator
	 *     Term returns UnaryTermOperator
	 *
	 * Constraint:
	 *     (symbol='NOT' expressionTerm=Term)
	 * </pre>
	 */
	protected void sequence_NegationTerm(ISerializationContext context, UnaryTermOperator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.UNARY_TERM_OPERATOR__SYMBOL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.UNARY_TERM_OPERATOR__SYMBOL));
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.UNARY_TERM_OPERATOR__EXPRESSION_TERM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.UNARY_TERM_OPERATOR__EXPRESSION_TERM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNegationTermAccess().getSymbolNOTKeyword_1_1_0(), semanticObject.getSymbol());
		feeder.accept(grammarAccess.getNegationTermAccess().getExpressionTermTermParserRuleCall_1_2_0(), semanticObject.getExpressionTerm());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns UnaryOperator
	 *     Expression.BinaryOperator_1_0 returns UnaryOperator
	 *     Negation returns UnaryOperator
	 *     Comparison returns UnaryOperator
	 *     Comparison.BinaryOperator_1_0 returns UnaryOperator
	 *     Plus returns UnaryOperator
	 *     Plus.BinaryOperator_1_0 returns UnaryOperator
	 *     Factor returns UnaryOperator
	 *     Factor.BinaryOperator_1_0 returns UnaryOperator
	 *     Negative returns UnaryOperator
	 *     Primary returns UnaryOperator
	 *
	 * Constraint:
	 *     ((symbol='!' expression=Comparison) | expression=Primary)
	 * </pre>
	 */
	protected void sequence_Negation_Negative(ISerializationContext context, UnaryOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns NumericValue
	 *     Expression.BinaryOperator_1_0 returns NumericValue
	 *     Negation returns NumericValue
	 *     Comparison returns NumericValue
	 *     Comparison.BinaryOperator_1_0 returns NumericValue
	 *     Plus returns NumericValue
	 *     Plus.BinaryOperator_1_0 returns NumericValue
	 *     Factor returns NumericValue
	 *     Factor.BinaryOperator_1_0 returns NumericValue
	 *     Negative returns NumericValue
	 *     Primary returns NumericValue
	 *     LiteralValue returns NumericValue
	 *     NumericValue returns NumericValue
	 *
	 * Constraint:
	 *     value=INT
	 * </pre>
	 */
	protected void sequence_NumericValue(ISerializationContext context, NumericValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.NUMERIC_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.NUMERIC_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumericValueAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Obligation returns Obligation
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Obligation(ISerializationContext context, Obligation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.CLAUSE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.CLAUSE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObligationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EventLog returns OnBreach
	 *     OnBreach returns OnBreach
	 *
	 * Constraint:
	 *     message=STRING
	 * </pre>
	 */
	protected void sequence_OnBreach(ISerializationContext context, OnBreach semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.EVENT_LOG__MESSAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.EVENT_LOG__MESSAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOnBreachAccess().getMessageSTRINGTerminalRuleCall_3_0(), semanticObject.getMessage());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EventLog returns OnSuccess
	 *     OnSuccess returns OnSuccess
	 *
	 * Constraint:
	 *     message=STRING
	 * </pre>
	 */
	protected void sequence_OnSuccess(ISerializationContext context, OnSuccess semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.EVENT_LOG__MESSAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.EVENT_LOG__MESSAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOnSuccessAccess().getMessageSTRINGTerminalRuleCall_3_0(), semanticObject.getMessage());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Party returns Process
	 *     Process returns Process
	 *
	 * Constraint:
	 *     name=STRING
	 * </pre>
	 */
	protected void sequence_Process(ISerializationContext context, br.edu.unijui.gca.jabuti.jabuti.Process semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.PARTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.PARTY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcessAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Prohibition returns Prohibition
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Prohibition(ISerializationContext context, Prohibition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.CLAUSE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.CLAUSE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProhibitionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Right returns Right
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Right(ISerializationContext context, Right semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.CLAUSE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.CLAUSE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRightAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExpressionTerm returns SessionInterval
	 *     ExpressionTerm.BinaryTermOperator_1_0 returns SessionInterval
	 *     NegationTerm returns SessionInterval
	 *     Term returns SessionInterval
	 *     SessionInterval returns SessionInterval
	 *
	 * Constraint:
	 *     (frequency=INT timeUnit=TimeUnit (messageContent=MessageContent | value=STRING)?)
	 * </pre>
	 */
	protected void sequence_SessionInterval(ISerializationContext context, SessionInterval semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns StringValue
	 *     Expression.BinaryOperator_1_0 returns StringValue
	 *     Negation returns StringValue
	 *     Comparison returns StringValue
	 *     Comparison.BinaryOperator_1_0 returns StringValue
	 *     Plus returns StringValue
	 *     Plus.BinaryOperator_1_0 returns StringValue
	 *     Factor returns StringValue
	 *     Factor.BinaryOperator_1_0 returns StringValue
	 *     Negative returns StringValue
	 *     Primary returns StringValue
	 *     LiteralValue returns StringValue
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=STRING
	 * </pre>
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Terms returns Terms
	 *
	 * Constraint:
	 *     (expressionTerm+=ExpressionTerm | conditionalExpression+=ConditionalExpression)+
	 * </pre>
	 */
	protected void sequence_Terms(ISerializationContext context, Terms semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExpressionTerm returns TimeInterval
	 *     ExpressionTerm.BinaryTermOperator_1_0 returns TimeInterval
	 *     NegationTerm returns TimeInterval
	 *     Term returns TimeInterval
	 *     TimeInterval returns TimeInterval
	 *
	 * Constraint:
	 *     (start=STRING end=STRING)
	 * </pre>
	 */
	protected void sequence_TimeInterval(ISerializationContext context, TimeInterval semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.TIME_INTERVAL__START) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.TIME_INTERVAL__START));
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.TIME_INTERVAL__END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.TIME_INTERVAL__END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeIntervalAccess().getStartSTRINGTerminalRuleCall_2_0(), semanticObject.getStart());
		feeder.accept(grammarAccess.getTimeIntervalAccess().getEndSTRINGTerminalRuleCall_4_0(), semanticObject.getEnd());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExpressionTerm returns Timeout
	 *     ExpressionTerm.BinaryTermOperator_1_0 returns Timeout
	 *     NegationTerm returns Timeout
	 *     Term returns Timeout
	 *     Timeout returns Timeout
	 *
	 * Constraint:
	 *     seconds=INT
	 * </pre>
	 */
	protected void sequence_Timeout(ISerializationContext context, Timeout semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.TIMEOUT__SECONDS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.TIMEOUT__SECONDS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeoutAccess().getSecondsINTTerminalRuleCall_2_0(), semanticObject.getSeconds());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns VariableValue
	 *     Expression.BinaryOperator_1_0 returns VariableValue
	 *     Negation returns VariableValue
	 *     Comparison returns VariableValue
	 *     Comparison.BinaryOperator_1_0 returns VariableValue
	 *     Plus returns VariableValue
	 *     Plus.BinaryOperator_1_0 returns VariableValue
	 *     Factor returns VariableValue
	 *     Factor.BinaryOperator_1_0 returns VariableValue
	 *     Negative returns VariableValue
	 *     Primary returns VariableValue
	 *     LiteralValue returns VariableValue
	 *     VariableValue returns VariableValue
	 *
	 * Constraint:
	 *     value=QualifiedName
	 * </pre>
	 */
	protected void sequence_VariableValue(ISerializationContext context, VariableValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.VARIABLE_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.VARIABLE_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableValueAccess().getValueQualifiedNameParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     (name=ID (expression=Expression | term=SessionInterval | term=MessageContent | term=TimeInterval | term=Timeout))
	 * </pre>
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExpressionTerm returns WeekDaysInterval
	 *     ExpressionTerm.BinaryTermOperator_1_0 returns WeekDaysInterval
	 *     NegationTerm returns WeekDaysInterval
	 *     Term returns WeekDaysInterval
	 *     WeekDaysInterval returns WeekDaysInterval
	 *
	 * Constraint:
	 *     (start=WeekDay end=WeekDay)
	 * </pre>
	 */
	protected void sequence_WeekDaysInterval(ISerializationContext context, WeekDaysInterval semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.WEEK_DAYS_INTERVAL__START) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.WEEK_DAYS_INTERVAL__START));
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.WEEK_DAYS_INTERVAL__END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.WEEK_DAYS_INTERVAL__END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWeekDaysIntervalAccess().getStartWeekDayEnumRuleCall_2_0(), semanticObject.getStart());
		feeder.accept(grammarAccess.getWeekDaysIntervalAccess().getEndWeekDayEnumRuleCall_4_0(), semanticObject.getEnd());
		feeder.finish();
	}
	
	
}
