/*
 * generated by Xtext 2.31.0
 */
grammar InternalJabuti;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package br.edu.unijui.gca.jabuti.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package br.edu.unijui.gca.jabuti.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import br.edu.unijui.gca.jabuti.services.JabutiGrammarAccess;

}
@parser::members {
	private JabutiGrammarAccess grammarAccess;

	public void setGrammarAccess(JabutiGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImport
entryRuleImport
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportAccess().getGroup()); }
		(rule__Import__Group__0)
		{ after(grammarAccess.getImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContract
entryRuleContract
:
{ before(grammarAccess.getContractRule()); }
	 ruleContract
{ after(grammarAccess.getContractRule()); } 
	 EOF 
;

// Rule Contract
ruleContract 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContractAccess().getGroup()); }
		(rule__Contract__Group__0)
		{ after(grammarAccess.getContractAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClause
entryRuleClause
:
{ before(grammarAccess.getClauseRule()); }
	 ruleClause
{ after(grammarAccess.getClauseRule()); } 
	 EOF 
;

// Rule Clause
ruleClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClauseAccess().getGroup()); }
		(rule__Clause__Group__0)
		{ after(grammarAccess.getClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRight
entryRuleRight
:
{ before(grammarAccess.getRightRule()); }
	 ruleRight
{ after(grammarAccess.getRightRule()); } 
	 EOF 
;

// Rule Right
ruleRight 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRightAccess().getGroup()); }
		(rule__Right__Group__0)
		{ after(grammarAccess.getRightAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObligation
entryRuleObligation
:
{ before(grammarAccess.getObligationRule()); }
	 ruleObligation
{ after(grammarAccess.getObligationRule()); } 
	 EOF 
;

// Rule Obligation
ruleObligation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObligationAccess().getGroup()); }
		(rule__Obligation__Group__0)
		{ after(grammarAccess.getObligationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProhibition
entryRuleProhibition
:
{ before(grammarAccess.getProhibitionRule()); }
	 ruleProhibition
{ after(grammarAccess.getProhibitionRule()); } 
	 EOF 
;

// Rule Prohibition
ruleProhibition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProhibitionAccess().getGroup()); }
		(rule__Prohibition__Group__0)
		{ after(grammarAccess.getProhibitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleApplication
entryRuleApplication
:
{ before(grammarAccess.getApplicationRule()); }
	 ruleApplication
{ after(grammarAccess.getApplicationRule()); } 
	 EOF 
;

// Rule Application
ruleApplication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getApplicationAccess().getGroup()); }
		(rule__Application__Group__0)
		{ after(grammarAccess.getApplicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcess
entryRuleProcess
:
{ before(grammarAccess.getProcessRule()); }
	 ruleProcess
{ after(grammarAccess.getProcessRule()); } 
	 EOF 
;

// Rule Process
ruleProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcessAccess().getGroup()); }
		(rule__Process__Group__0)
		{ after(grammarAccess.getProcessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEventLog
entryRuleEventLog
:
{ before(grammarAccess.getEventLogRule()); }
	 ruleEventLog
{ after(grammarAccess.getEventLogRule()); } 
	 EOF 
;

// Rule EventLog
ruleEventLog 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventLogAccess().getAlternatives()); }
		(rule__EventLog__Alternatives)
		{ after(grammarAccess.getEventLogAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOnSuccess
entryRuleOnSuccess
:
{ before(grammarAccess.getOnSuccessRule()); }
	 ruleOnSuccess
{ after(grammarAccess.getOnSuccessRule()); } 
	 EOF 
;

// Rule OnSuccess
ruleOnSuccess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOnSuccessAccess().getGroup()); }
		(rule__OnSuccess__Group__0)
		{ after(grammarAccess.getOnSuccessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOnBreach
entryRuleOnBreach
:
{ before(grammarAccess.getOnBreachRule()); }
	 ruleOnBreach
{ after(grammarAccess.getOnBreachRule()); } 
	 EOF 
;

// Rule OnBreach
ruleOnBreach 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOnBreachAccess().getGroup()); }
		(rule__OnBreach__Group__0)
		{ after(grammarAccess.getOnBreachAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getGroup()); }
		(rule__Expression__Group__0)
		{ after(grammarAccess.getExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNegation
entryRuleNegation
:
{ before(grammarAccess.getNegationRule()); }
	 ruleNegation
{ after(grammarAccess.getNegationRule()); } 
	 EOF 
;

// Rule Negation
ruleNegation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNegationAccess().getAlternatives()); }
		(rule__Negation__Alternatives)
		{ after(grammarAccess.getNegationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparison
entryRuleComparison
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup()); }
		(rule__Comparison__Group__0)
		{ after(grammarAccess.getComparisonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlus
entryRulePlus
:
{ before(grammarAccess.getPlusRule()); }
	 rulePlus
{ after(grammarAccess.getPlusRule()); } 
	 EOF 
;

// Rule Plus
rulePlus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlusAccess().getGroup()); }
		(rule__Plus__Group__0)
		{ after(grammarAccess.getPlusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFactor
entryRuleFactor
:
{ before(grammarAccess.getFactorRule()); }
	 ruleFactor
{ after(grammarAccess.getFactorRule()); } 
	 EOF 
;

// Rule Factor
ruleFactor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFactorAccess().getGroup()); }
		(rule__Factor__Group__0)
		{ after(grammarAccess.getFactorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNegative
entryRuleNegative
:
{ before(grammarAccess.getNegativeRule()); }
	 ruleNegative
{ after(grammarAccess.getNegativeRule()); } 
	 EOF 
;

// Rule Negative
ruleNegative 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNegativeAccess().getAlternatives()); }
		(rule__Negative__Alternatives)
		{ after(grammarAccess.getNegativeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteralValue
entryRuleLiteralValue
:
{ before(grammarAccess.getLiteralValueRule()); }
	 ruleLiteralValue
{ after(grammarAccess.getLiteralValueRule()); } 
	 EOF 
;

// Rule LiteralValue
ruleLiteralValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralValueAccess().getAlternatives()); }
		(rule__LiteralValue__Alternatives)
		{ after(grammarAccess.getLiteralValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumericValue
entryRuleNumericValue
:
{ before(grammarAccess.getNumericValueRule()); }
	 ruleNumericValue
{ after(grammarAccess.getNumericValueRule()); } 
	 EOF 
;

// Rule NumericValue
ruleNumericValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumericValueAccess().getValueAssignment()); }
		(rule__NumericValue__ValueAssignment)
		{ after(grammarAccess.getNumericValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringValue
entryRuleStringValue
:
{ before(grammarAccess.getStringValueRule()); }
	 ruleStringValue
{ after(grammarAccess.getStringValueRule()); } 
	 EOF 
;

// Rule StringValue
ruleStringValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringValueAccess().getValueAssignment()); }
		(rule__StringValue__ValueAssignment)
		{ after(grammarAccess.getStringValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableValue
entryRuleVariableValue
:
{ before(grammarAccess.getVariableValueRule()); }
	 ruleVariableValue
{ after(grammarAccess.getVariableValueRule()); } 
	 EOF 
;

// Rule VariableValue
ruleVariableValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableValueAccess().getValueAssignment()); }
		(rule__VariableValue__ValueAssignment)
		{ after(grammarAccess.getVariableValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
		(rule__FunctionCall__Group__0)
		{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getGroup()); }
		(rule__Variable__Group__0)
		{ after(grammarAccess.getVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerms
entryRuleTerms
:
{ before(grammarAccess.getTermsRule()); }
	 ruleTerms
{ after(grammarAccess.getTermsRule()); } 
	 EOF 
;

// Rule Terms
ruleTerms 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getTermsAccess().getAlternatives()); }
			(rule__Terms__Alternatives)
			{ after(grammarAccess.getTermsAccess().getAlternatives()); }
		)
		(
			{ before(grammarAccess.getTermsAccess().getAlternatives()); }
			(rule__Terms__Alternatives)*
			{ after(grammarAccess.getTermsAccess().getAlternatives()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpressionTerm
entryRuleExpressionTerm
:
{ before(grammarAccess.getExpressionTermRule()); }
	 ruleExpressionTerm
{ after(grammarAccess.getExpressionTermRule()); } 
	 EOF 
;

// Rule ExpressionTerm
ruleExpressionTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionTermAccess().getGroup()); }
		(rule__ExpressionTerm__Group__0)
		{ after(grammarAccess.getExpressionTermAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNegationTerm
entryRuleNegationTerm
:
{ before(grammarAccess.getNegationTermRule()); }
	 ruleNegationTerm
{ after(grammarAccess.getNegationTermRule()); } 
	 EOF 
;

// Rule NegationTerm
ruleNegationTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNegationTermAccess().getAlternatives()); }
		(rule__NegationTerm__Alternatives)
		{ after(grammarAccess.getNegationTermAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerm
entryRuleTerm
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTermAccess().getAlternatives()); }
		(rule__Term__Alternatives)
		{ after(grammarAccess.getTermAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression
:
{ before(grammarAccess.getConditionalExpressionRule()); }
	 ruleConditionalExpression
{ after(grammarAccess.getConditionalExpressionRule()); } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getGroup()); }
		(rule__ConditionalExpression__Group__0)
		{ after(grammarAccess.getConditionalExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalOperator
entryRuleLogicalOperator
:
{ before(grammarAccess.getLogicalOperatorRule()); }
	 ruleLogicalOperator
{ after(grammarAccess.getLogicalOperatorRule()); } 
	 EOF 
;

// Rule LogicalOperator
ruleLogicalOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getSymbolAssignment()); }
		(rule__LogicalOperator__SymbolAssignment)
		{ after(grammarAccess.getLogicalOperatorAccess().getSymbolAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTimeInterval
entryRuleTimeInterval
:
{ before(grammarAccess.getTimeIntervalRule()); }
	 ruleTimeInterval
{ after(grammarAccess.getTimeIntervalRule()); } 
	 EOF 
;

// Rule TimeInterval
ruleTimeInterval 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimeIntervalAccess().getGroup()); }
		(rule__TimeInterval__Group__0)
		{ after(grammarAccess.getTimeIntervalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSessionInterval
entryRuleSessionInterval
:
{ before(grammarAccess.getSessionIntervalRule()); }
	 ruleSessionInterval
{ after(grammarAccess.getSessionIntervalRule()); } 
	 EOF 
;

// Rule SessionInterval
ruleSessionInterval 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSessionIntervalAccess().getGroup()); }
		(rule__SessionInterval__Group__0)
		{ after(grammarAccess.getSessionIntervalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTimeout
entryRuleTimeout
:
{ before(grammarAccess.getTimeoutRule()); }
	 ruleTimeout
{ after(grammarAccess.getTimeoutRule()); } 
	 EOF 
;

// Rule Timeout
ruleTimeout 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimeoutAccess().getGroup()); }
		(rule__Timeout__Group__0)
		{ after(grammarAccess.getTimeoutAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMaxNumberOfOperation
entryRuleMaxNumberOfOperation
:
{ before(grammarAccess.getMaxNumberOfOperationRule()); }
	 ruleMaxNumberOfOperation
{ after(grammarAccess.getMaxNumberOfOperationRule()); } 
	 EOF 
;

// Rule MaxNumberOfOperation
ruleMaxNumberOfOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMaxNumberOfOperationAccess().getGroup()); }
		(rule__MaxNumberOfOperation__Group__0)
		{ after(grammarAccess.getMaxNumberOfOperationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWeekDaysInterval
entryRuleWeekDaysInterval
:
{ before(grammarAccess.getWeekDaysIntervalRule()); }
	 ruleWeekDaysInterval
{ after(grammarAccess.getWeekDaysIntervalRule()); } 
	 EOF 
;

// Rule WeekDaysInterval
ruleWeekDaysInterval 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWeekDaysIntervalAccess().getGroup()); }
		(rule__WeekDaysInterval__Group__0)
		{ after(grammarAccess.getWeekDaysIntervalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMessageContent
entryRuleMessageContent
:
{ before(grammarAccess.getMessageContentRule()); }
	 ruleMessageContent
{ after(grammarAccess.getMessageContentRule()); } 
	 EOF 
;

// Rule MessageContent
ruleMessageContent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMessageContentAccess().getGroup()); }
		(rule__MessageContent__Group__0)
		{ after(grammarAccess.getMessageContentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparisonOperator
entryRuleComparisonOperator
:
{ before(grammarAccess.getComparisonOperatorRule()); }
	 ruleComparisonOperator
{ after(grammarAccess.getComparisonOperatorRule()); } 
	 EOF 
;

// Rule ComparisonOperator
ruleComparisonOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getAlternatives()); }
		(rule__ComparisonOperator__Alternatives)
		{ after(grammarAccess.getComparisonOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard
:
{ before(grammarAccess.getQualifiedNameWithWildcardRule()); }
	 ruleQualifiedNameWithWildcard
{ after(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
		(rule__QualifiedNameWithWildcard__Group__0)
		{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule RolePlayer
ruleRolePlayer
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRolePlayerAccess().getAlternatives()); }
		(rule__RolePlayer__Alternatives)
		{ after(grammarAccess.getRolePlayerAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Operation
ruleOperation
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getAlternatives()); }
		(rule__Operation__Alternatives)
		{ after(grammarAccess.getOperationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule WeekDay
ruleWeekDay
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWeekDayAccess().getAlternatives()); }
		(rule__WeekDay__Alternatives)
		{ after(grammarAccess.getWeekDayAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule TimeUnit
ruleTimeUnit
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeUnitAccess().getAlternatives()); }
		(rule__TimeUnit__Alternatives)
		{ after(grammarAccess.getTimeUnitAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getRightParserRuleCall_0_0()); }
		ruleRight
		{ after(grammarAccess.getClauseAccess().getRightParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getClauseAccess().getProhibitionParserRuleCall_0_1()); }
		ruleProhibition
		{ after(grammarAccess.getClauseAccess().getProhibitionParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getClauseAccess().getObligationParserRuleCall_0_2()); }
		ruleObligation
		{ after(grammarAccess.getClauseAccess().getObligationParserRuleCall_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventLog__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventLogAccess().getOnSuccessParserRuleCall_0()); }
		ruleOnSuccess
		{ after(grammarAccess.getEventLogAccess().getOnSuccessParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEventLogAccess().getOnBreachParserRuleCall_1()); }
		ruleOnBreach
		{ after(grammarAccess.getEventLogAccess().getOnBreachParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getSymbolAssignment_1_1_0()); }
		(rule__Expression__SymbolAssignment_1_1_0)
		{ after(grammarAccess.getExpressionAccess().getSymbolAssignment_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getSymbolAssignment_1_1_1()); }
		(rule__Expression__SymbolAssignment_1_1_1)
		{ after(grammarAccess.getExpressionAccess().getSymbolAssignment_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegationAccess().getComparisonParserRuleCall_0()); }
		ruleComparison
		{ after(grammarAccess.getNegationAccess().getComparisonParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNegationAccess().getGroup_1()); }
		(rule__Negation__Group_1__0)
		{ after(grammarAccess.getNegationAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_0()); }
		(rule__Comparison__SymbolAssignment_1_1_0)
		{ after(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_1()); }
		(rule__Comparison__SymbolAssignment_1_1_1)
		{ after(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_2()); }
		(rule__Comparison__SymbolAssignment_1_1_2)
		{ after(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_3()); }
		(rule__Comparison__SymbolAssignment_1_1_3)
		{ after(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_3()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_4()); }
		(rule__Comparison__SymbolAssignment_1_1_4)
		{ after(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_4()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_5()); }
		(rule__Comparison__SymbolAssignment_1_1_5)
		{ after(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_5()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_6()); }
		(rule__Comparison__SymbolAssignment_1_1_6)
		{ after(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_6()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_7()); }
		(rule__Comparison__SymbolAssignment_1_1_7)
		{ after(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusAccess().getPlusSignKeyword_1_1_0()); }
		'+'
		{ after(grammarAccess.getPlusAccess().getPlusSignKeyword_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getPlusAccess().getHyphenMinusKeyword_1_1_1()); }
		'-'
		{ after(grammarAccess.getPlusAccess().getHyphenMinusKeyword_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getAsteriskKeyword_1_1_0()); }
		'*'
		{ after(grammarAccess.getFactorAccess().getAsteriskKeyword_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getFactorAccess().getSolidusKeyword_1_1_1()); }
		'/'
		{ after(grammarAccess.getFactorAccess().getSolidusKeyword_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negative__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegativeAccess().getPrimaryParserRuleCall_0()); }
		rulePrimary
		{ after(grammarAccess.getNegativeAccess().getPrimaryParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNegativeAccess().getGroup_1()); }
		(rule__Negative__Group_1__0)
		{ after(grammarAccess.getNegativeAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getLiteralValueParserRuleCall_0()); }
		ruleLiteralValue
		{ after(grammarAccess.getPrimaryAccess().getLiteralValueParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_1()); }
		(rule__Primary__Group_1__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralValueAccess().getNumericValueParserRuleCall_0()); }
		ruleNumericValue
		{ after(grammarAccess.getLiteralValueAccess().getNumericValueParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralValueAccess().getStringValueParserRuleCall_1()); }
		ruleStringValue
		{ after(grammarAccess.getLiteralValueAccess().getStringValueParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralValueAccess().getVariableValueParserRuleCall_2()); }
		ruleVariableValue
		{ after(grammarAccess.getLiteralValueAccess().getVariableValueParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralValueAccess().getFunctionCallParserRuleCall_3()); }
		ruleFunctionCall
		{ after(grammarAccess.getLiteralValueAccess().getFunctionCallParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getExpressionAssignment_2_0()); }
		(rule__Variable__ExpressionAssignment_2_0)
		{ after(grammarAccess.getVariableAccess().getExpressionAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getTermAssignment_2_1()); }
		(rule__Variable__TermAssignment_2_1)
		{ after(grammarAccess.getVariableAccess().getTermAssignment_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__TermAlternatives_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getTermSessionIntervalParserRuleCall_2_1_0_0()); }
		ruleSessionInterval
		{ after(grammarAccess.getVariableAccess().getTermSessionIntervalParserRuleCall_2_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getTermMessageContentParserRuleCall_2_1_0_1()); }
		ruleMessageContent
		{ after(grammarAccess.getVariableAccess().getTermMessageContentParserRuleCall_2_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getTermTimeIntervalParserRuleCall_2_1_0_2()); }
		ruleTimeInterval
		{ after(grammarAccess.getVariableAccess().getTermTimeIntervalParserRuleCall_2_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getTermTimeoutParserRuleCall_2_1_0_3()); }
		ruleTimeout
		{ after(grammarAccess.getVariableAccess().getTermTimeoutParserRuleCall_2_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terms__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermsAccess().getExpressionTermAssignment_0()); }
		(rule__Terms__ExpressionTermAssignment_0)
		{ after(grammarAccess.getTermsAccess().getExpressionTermAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getTermsAccess().getConditionalExpressionAssignment_1()); }
		(rule__Terms__ConditionalExpressionAssignment_1)
		{ after(grammarAccess.getTermsAccess().getConditionalExpressionAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTerm__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionTermAccess().getSymbolAssignment_1_1_0()); }
		(rule__ExpressionTerm__SymbolAssignment_1_1_0)
		{ after(grammarAccess.getExpressionTermAccess().getSymbolAssignment_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionTermAccess().getSymbolAssignment_1_1_1()); }
		(rule__ExpressionTerm__SymbolAssignment_1_1_1)
		{ after(grammarAccess.getExpressionTermAccess().getSymbolAssignment_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationTerm__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegationTermAccess().getTermParserRuleCall_0()); }
		ruleTerm
		{ after(grammarAccess.getNegationTermAccess().getTermParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNegationTermAccess().getGroup_1()); }
		(rule__NegationTerm__Group_1__0)
		{ after(grammarAccess.getNegationTermAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getGroup_0()); }
		(rule__Term__Group_0__0)
		{ after(grammarAccess.getTermAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getSessionIntervalParserRuleCall_1()); }
		ruleSessionInterval
		{ after(grammarAccess.getTermAccess().getSessionIntervalParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getWeekDaysIntervalParserRuleCall_2()); }
		ruleWeekDaysInterval
		{ after(grammarAccess.getTermAccess().getWeekDaysIntervalParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getTimeIntervalParserRuleCall_3()); }
		ruleTimeInterval
		{ after(grammarAccess.getTermAccess().getTimeIntervalParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getTimeoutParserRuleCall_4()); }
		ruleTimeout
		{ after(grammarAccess.getTermAccess().getTimeoutParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getMaxNumberOfOperationParserRuleCall_5()); }
		ruleMaxNumberOfOperation
		{ after(grammarAccess.getTermAccess().getMaxNumberOfOperationParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getMessageContentParserRuleCall_6()); }
		ruleMessageContent
		{ after(grammarAccess.getTermAccess().getMessageContentParserRuleCall_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Alternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getQualifiedNameParserRuleCall_3_0_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getConditionalExpressionAccess().getQualifiedNameParserRuleCall_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getSTRINGTerminalRuleCall_3_0_1()); }
		RULE_STRING
		{ after(grammarAccess.getConditionalExpressionAccess().getSTRINGTerminalRuleCall_3_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Alternatives_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getQualifiedNameParserRuleCall_3_1_1_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getConditionalExpressionAccess().getQualifiedNameParserRuleCall_3_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getSTRINGTerminalRuleCall_3_1_1_1()); }
		RULE_STRING
		{ after(grammarAccess.getConditionalExpressionAccess().getSTRINGTerminalRuleCall_3_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Alternatives_4_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getQualifiedNameParserRuleCall_4_2_1_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getConditionalExpressionAccess().getQualifiedNameParserRuleCall_4_2_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getSTRINGTerminalRuleCall_4_2_1_1()); }
		RULE_STRING
		{ after(grammarAccess.getConditionalExpressionAccess().getSTRINGTerminalRuleCall_4_2_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperator__SymbolAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getSymbolCommaKeyword_0_0()); }
		','
		{ after(grammarAccess.getLogicalOperatorAccess().getSymbolCommaKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getSymbolANDKeyword_0_1()); }
		'AND'
		{ after(grammarAccess.getLogicalOperatorAccess().getSymbolANDKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getSymbolORKeyword_0_2()); }
		'OR'
		{ after(grammarAccess.getLogicalOperatorAccess().getSymbolORKeyword_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SessionInterval__Alternatives_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSessionIntervalAccess().getMessageContentAssignment_4_1_0()); }
		(rule__SessionInterval__MessageContentAssignment_4_1_0)
		{ after(grammarAccess.getSessionIntervalAccess().getMessageContentAssignment_4_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getSessionIntervalAccess().getValueAssignment_4_1_1()); }
		(rule__SessionInterval__ValueAssignment_4_1_1)
		{ after(grammarAccess.getSessionIntervalAccess().getValueAssignment_4_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getSessionIntervalAccess().getQualifiedNameParserRuleCall_4_1_2()); }
		ruleQualifiedName
		{ after(grammarAccess.getSessionIntervalAccess().getQualifiedNameParserRuleCall_4_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageContent__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMessageContentAccess().getContentAssignment_2_0()); }
		(rule__MessageContent__ContentAssignment_2_0)
		{ after(grammarAccess.getMessageContentAccess().getContentAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getMessageContentAccess().getQualifiedNameParserRuleCall_2_1()); }
		ruleQualifiedName
		{ after(grammarAccess.getMessageContentAccess().getQualifiedNameParserRuleCall_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getSymbolAssignment_0()); }
		(rule__ComparisonOperator__SymbolAssignment_0)
		{ after(grammarAccess.getComparisonOperatorAccess().getSymbolAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getSymbolAssignment_1()); }
		(rule__ComparisonOperator__SymbolAssignment_1)
		{ after(grammarAccess.getComparisonOperatorAccess().getSymbolAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getSymbolAssignment_2()); }
		(rule__ComparisonOperator__SymbolAssignment_2)
		{ after(grammarAccess.getComparisonOperatorAccess().getSymbolAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getSymbolAssignment_3()); }
		(rule__ComparisonOperator__SymbolAssignment_3)
		{ after(grammarAccess.getComparisonOperatorAccess().getSymbolAssignment_3()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getSymbolAssignment_4()); }
		(rule__ComparisonOperator__SymbolAssignment_4)
		{ after(grammarAccess.getComparisonOperatorAccess().getSymbolAssignment_4()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getSymbolAssignment_5()); }
		(rule__ComparisonOperator__SymbolAssignment_5)
		{ after(grammarAccess.getComparisonOperatorAccess().getSymbolAssignment_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RolePlayer__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRolePlayerAccess().getAPPLICATIONEnumLiteralDeclaration_0()); }
		('application')
		{ after(grammarAccess.getRolePlayerAccess().getAPPLICATIONEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getRolePlayerAccess().getPROCESSEnumLiteralDeclaration_1()); }
		('process')
		{ after(grammarAccess.getRolePlayerAccess().getPROCESSEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getPUSHEnumLiteralDeclaration_0()); }
		('push')
		{ after(grammarAccess.getOperationAccess().getPUSHEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperationAccess().getPOLLEnumLiteralDeclaration_1()); }
		('poll')
		{ after(grammarAccess.getOperationAccess().getPOLLEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getOperationAccess().getWRITEEnumLiteralDeclaration_2()); }
		('write')
		{ after(grammarAccess.getOperationAccess().getWRITEEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getOperationAccess().getREADEnumLiteralDeclaration_3()); }
		('read')
		{ after(grammarAccess.getOperationAccess().getREADEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getOperationAccess().getREQUESTEnumLiteralDeclaration_4()); }
		('request')
		{ after(grammarAccess.getOperationAccess().getREQUESTEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getOperationAccess().getRESPONSEEnumLiteralDeclaration_5()); }
		('response')
		{ after(grammarAccess.getOperationAccess().getRESPONSEEnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WeekDay__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWeekDayAccess().getSUNDAYEnumLiteralDeclaration_0()); }
		('Sunday')
		{ after(grammarAccess.getWeekDayAccess().getSUNDAYEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getWeekDayAccess().getMONDAYEnumLiteralDeclaration_1()); }
		('Monday')
		{ after(grammarAccess.getWeekDayAccess().getMONDAYEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getWeekDayAccess().getTUESDAYEnumLiteralDeclaration_2()); }
		('Tuesday')
		{ after(grammarAccess.getWeekDayAccess().getTUESDAYEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getWeekDayAccess().getWEDNESDAYEnumLiteralDeclaration_3()); }
		('Wednesday')
		{ after(grammarAccess.getWeekDayAccess().getWEDNESDAYEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getWeekDayAccess().getTHURSDAYEnumLiteralDeclaration_4()); }
		('Thursday')
		{ after(grammarAccess.getWeekDayAccess().getTHURSDAYEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getWeekDayAccess().getFRIDAYEnumLiteralDeclaration_5()); }
		('Friday')
		{ after(grammarAccess.getWeekDayAccess().getFRIDAYEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getWeekDayAccess().getSATURDAYEnumLiteralDeclaration_6()); }
		('Saturday')
		{ after(grammarAccess.getWeekDayAccess().getSATURDAYEnumLiteralDeclaration_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeUnit__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeUnitAccess().getSECONDEnumLiteralDeclaration_0()); }
		('Second')
		{ after(grammarAccess.getTimeUnitAccess().getSECONDEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitAccess().getMINUTEEnumLiteralDeclaration_1()); }
		('Minute')
		{ after(grammarAccess.getTimeUnitAccess().getMINUTEEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitAccess().getHOUREnumLiteralDeclaration_2()); }
		('Hour')
		{ after(grammarAccess.getTimeUnitAccess().getHOUREnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitAccess().getDAYEnumLiteralDeclaration_3()); }
		('Day')
		{ after(grammarAccess.getTimeUnitAccess().getDAYEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitAccess().getWEEKEnumLiteralDeclaration_4()); }
		('Week')
		{ after(grammarAccess.getTimeUnitAccess().getWEEKEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitAccess().getMONTHEnumLiteralDeclaration_5()); }
		('Month')
		{ after(grammarAccess.getTimeUnitAccess().getMONTHEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitAccess().getYEAREnumLiteralDeclaration_6()); }
		('Year')
		{ after(grammarAccess.getTimeUnitAccess().getYEAREnumLiteralDeclaration_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getImportsAssignment_0()); }
	(rule__Model__ImportsAssignment_0)*
	{ after(grammarAccess.getModelAccess().getImportsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getContractAssignment_1()); }
	(rule__Model__ContractAssignment_1)
	{ after(grammarAccess.getModelAccess().getContractAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
	(rule__Import__ImportedNamespaceAssignment_1)
	{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Contract__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__0__Impl
	rule__Contract__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getContractKeyword_0()); }
	'contract'
	{ after(grammarAccess.getContractAccess().getContractKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__1__Impl
	rule__Contract__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getNameAssignment_1()); }
	(rule__Contract__NameAssignment_1)
	{ after(grammarAccess.getContractAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__2__Impl
	rule__Contract__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getContractAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__3__Impl
	rule__Contract__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getDatesKeyword_3()); }
	'dates'
	{ after(grammarAccess.getContractAccess().getDatesKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__4__Impl
	rule__Contract__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getContractAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__5__Impl
	rule__Contract__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getBeginDateKeyword_5()); }
	'beginDate'
	{ after(grammarAccess.getContractAccess().getBeginDateKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__6__Impl
	rule__Contract__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getEqualsSignKeyword_6()); }
	'='
	{ after(grammarAccess.getContractAccess().getEqualsSignKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__7__Impl
	rule__Contract__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getBeginDateAssignment_7()); }
	(rule__Contract__BeginDateAssignment_7)
	{ after(grammarAccess.getContractAccess().getBeginDateAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__8__Impl
	rule__Contract__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getDueDateKeyword_8()); }
	'dueDate'
	{ after(grammarAccess.getContractAccess().getDueDateKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__9__Impl
	rule__Contract__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getEqualsSignKeyword_9()); }
	'='
	{ after(grammarAccess.getContractAccess().getEqualsSignKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__10__Impl
	rule__Contract__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getDueDateAssignment_10()); }
	(rule__Contract__DueDateAssignment_10)
	{ after(grammarAccess.getContractAccess().getDueDateAssignment_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__11__Impl
	rule__Contract__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getRightCurlyBracketKeyword_11()); }
	'}'
	{ after(grammarAccess.getContractAccess().getRightCurlyBracketKeyword_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__12
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__12__Impl
	rule__Contract__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__12__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getPartiesKeyword_12()); }
	'parties'
	{ after(grammarAccess.getContractAccess().getPartiesKeyword_12()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__13
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__13__Impl
	rule__Contract__Group__14
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__13__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getLeftCurlyBracketKeyword_13()); }
	'{'
	{ after(grammarAccess.getContractAccess().getLeftCurlyBracketKeyword_13()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__14
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__14__Impl
	rule__Contract__Group__15
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__14__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getApplicationAssignment_14()); }
	(rule__Contract__ApplicationAssignment_14)
	{ after(grammarAccess.getContractAccess().getApplicationAssignment_14()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__15
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__15__Impl
	rule__Contract__Group__16
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__15__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getProcessAssignment_15()); }
	(rule__Contract__ProcessAssignment_15)
	{ after(grammarAccess.getContractAccess().getProcessAssignment_15()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__16
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__16__Impl
	rule__Contract__Group__17
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__16__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getRightCurlyBracketKeyword_16()); }
	'}'
	{ after(grammarAccess.getContractAccess().getRightCurlyBracketKeyword_16()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__17
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__17__Impl
	rule__Contract__Group__18
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__17__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getGroup_17()); }
	(rule__Contract__Group_17__0)?
	{ after(grammarAccess.getContractAccess().getGroup_17()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__18
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__18__Impl
	rule__Contract__Group__19
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__18__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getClausesKeyword_18()); }
	'clauses'
	{ after(grammarAccess.getContractAccess().getClausesKeyword_18()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__19
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__19__Impl
	rule__Contract__Group__20
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__19__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getLeftCurlyBracketKeyword_19()); }
	'{'
	{ after(grammarAccess.getContractAccess().getLeftCurlyBracketKeyword_19()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__20
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__20__Impl
	rule__Contract__Group__21
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__20__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getClausesAssignment_20()); }
	(rule__Contract__ClausesAssignment_20)*
	{ after(grammarAccess.getContractAccess().getClausesAssignment_20()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__21
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__21__Impl
	rule__Contract__Group__22
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__21__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getRightCurlyBracketKeyword_21()); }
	'}'
	{ after(grammarAccess.getContractAccess().getRightCurlyBracketKeyword_21()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__22
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group__22__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group__22__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getRightCurlyBracketKeyword_22()); }
	'}'
	{ after(grammarAccess.getContractAccess().getRightCurlyBracketKeyword_22()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Contract__Group_17__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group_17__0__Impl
	rule__Contract__Group_17__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group_17__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getVariablesKeyword_17_0()); }
	'variables'
	{ after(grammarAccess.getContractAccess().getVariablesKeyword_17_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group_17__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group_17__1__Impl
	rule__Contract__Group_17__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group_17__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getLeftCurlyBracketKeyword_17_1()); }
	'{'
	{ after(grammarAccess.getContractAccess().getLeftCurlyBracketKeyword_17_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group_17__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group_17__2__Impl
	rule__Contract__Group_17__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group_17__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getVariablesAssignment_17_2()); }
	(rule__Contract__VariablesAssignment_17_2)*
	{ after(grammarAccess.getContractAccess().getVariablesAssignment_17_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group_17__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contract__Group_17__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__Group_17__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContractAccess().getRightCurlyBracketKeyword_17_3()); }
	'}'
	{ after(grammarAccess.getContractAccess().getRightCurlyBracketKeyword_17_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Clause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group__0__Impl
	rule__Clause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getAlternatives_0()); }
	(rule__Clause__Alternatives_0)
	{ after(grammarAccess.getClauseAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group__1__Impl
	rule__Clause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getClauseAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group__2__Impl
	rule__Clause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getRolePlayerKeyword_2()); }
	'rolePlayer'
	{ after(grammarAccess.getClauseAccess().getRolePlayerKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group__3__Impl
	rule__Clause__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getEqualsSignKeyword_3()); }
	'='
	{ after(grammarAccess.getClauseAccess().getEqualsSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group__4__Impl
	rule__Clause__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getRolePlayerAssignment_4()); }
	(rule__Clause__RolePlayerAssignment_4)
	{ after(grammarAccess.getClauseAccess().getRolePlayerAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group__5__Impl
	rule__Clause__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getOperationKeyword_5()); }
	'operation'
	{ after(grammarAccess.getClauseAccess().getOperationKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group__6__Impl
	rule__Clause__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getEqualsSignKeyword_6()); }
	'='
	{ after(grammarAccess.getClauseAccess().getEqualsSignKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group__7__Impl
	rule__Clause__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getOperationAssignment_7()); }
	(rule__Clause__OperationAssignment_7)
	{ after(grammarAccess.getClauseAccess().getOperationAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group__8__Impl
	rule__Clause__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getTermsKeyword_8()); }
	'terms'
	{ after(grammarAccess.getClauseAccess().getTermsKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group__9__Impl
	rule__Clause__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getLeftCurlyBracketKeyword_9()); }
	'{'
	{ after(grammarAccess.getClauseAccess().getLeftCurlyBracketKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group__10__Impl
	rule__Clause__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getTermsAssignment_10()); }
	(rule__Clause__TermsAssignment_10)
	{ after(grammarAccess.getClauseAccess().getTermsAssignment_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group__11__Impl
	rule__Clause__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getRightCurlyBracketKeyword_11()); }
	'}'
	{ after(grammarAccess.getClauseAccess().getRightCurlyBracketKeyword_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__12
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group__12__Impl
	rule__Clause__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__12__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getEventLogAssignment_12()); }
	(rule__Clause__EventLogAssignment_12)*
	{ after(grammarAccess.getClauseAccess().getEventLogAssignment_12()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__13
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group__13__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__13__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getRightCurlyBracketKeyword_13()); }
	'}'
	{ after(grammarAccess.getClauseAccess().getRightCurlyBracketKeyword_13()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Right__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__0__Impl
	rule__Right__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getRightKeyword_0()); }
	'right'
	{ after(grammarAccess.getRightAccess().getRightKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getNameAssignment_1()); }
	(rule__Right__NameAssignment_1)
	{ after(grammarAccess.getRightAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Obligation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Obligation__Group__0__Impl
	rule__Obligation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Obligation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObligationAccess().getObligationKeyword_0()); }
	'obligation'
	{ after(grammarAccess.getObligationAccess().getObligationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Obligation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Obligation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Obligation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObligationAccess().getNameAssignment_1()); }
	(rule__Obligation__NameAssignment_1)
	{ after(grammarAccess.getObligationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Prohibition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prohibition__Group__0__Impl
	rule__Prohibition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Prohibition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProhibitionAccess().getProhibitionKeyword_0()); }
	'prohibition'
	{ after(grammarAccess.getProhibitionAccess().getProhibitionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prohibition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prohibition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Prohibition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProhibitionAccess().getNameAssignment_1()); }
	(rule__Prohibition__NameAssignment_1)
	{ after(grammarAccess.getProhibitionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Application__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Application__Group__0__Impl
	rule__Application__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getApplicationAccess().getApplicationKeyword_0()); }
	'application'
	{ after(grammarAccess.getApplicationAccess().getApplicationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Application__Group__1__Impl
	rule__Application__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getApplicationAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getApplicationAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Application__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getApplicationAccess().getNameAssignment_2()); }
	(rule__Application__NameAssignment_2)
	{ after(grammarAccess.getApplicationAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Process__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Process__Group__0__Impl
	rule__Process__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessAccess().getProcessKeyword_0()); }
	'process'
	{ after(grammarAccess.getProcessAccess().getProcessKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Process__Group__1__Impl
	rule__Process__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getProcessAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Process__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessAccess().getNameAssignment_2()); }
	(rule__Process__NameAssignment_2)
	{ after(grammarAccess.getProcessAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OnSuccess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OnSuccess__Group__0__Impl
	rule__OnSuccess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OnSuccess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOnSuccessAccess().getOnSuccessKeyword_0()); }
	'onSuccess'
	{ after(grammarAccess.getOnSuccessAccess().getOnSuccessKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OnSuccess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OnSuccess__Group__1__Impl
	rule__OnSuccess__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OnSuccess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOnSuccessAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getOnSuccessAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OnSuccess__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OnSuccess__Group__2__Impl
	rule__OnSuccess__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OnSuccess__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOnSuccessAccess().getLogKeyword_2()); }
	'log('
	{ after(grammarAccess.getOnSuccessAccess().getLogKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OnSuccess__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OnSuccess__Group__3__Impl
	rule__OnSuccess__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OnSuccess__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOnSuccessAccess().getMessageAssignment_3()); }
	(rule__OnSuccess__MessageAssignment_3)
	{ after(grammarAccess.getOnSuccessAccess().getMessageAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OnSuccess__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OnSuccess__Group__4__Impl
	rule__OnSuccess__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__OnSuccess__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOnSuccessAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getOnSuccessAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OnSuccess__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OnSuccess__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OnSuccess__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOnSuccessAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getOnSuccessAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OnBreach__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OnBreach__Group__0__Impl
	rule__OnBreach__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OnBreach__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOnBreachAccess().getOnBreachKeyword_0()); }
	'onBreach'
	{ after(grammarAccess.getOnBreachAccess().getOnBreachKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OnBreach__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OnBreach__Group__1__Impl
	rule__OnBreach__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OnBreach__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOnBreachAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getOnBreachAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OnBreach__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OnBreach__Group__2__Impl
	rule__OnBreach__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OnBreach__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOnBreachAccess().getLogKeyword_2()); }
	'log('
	{ after(grammarAccess.getOnBreachAccess().getLogKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OnBreach__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OnBreach__Group__3__Impl
	rule__OnBreach__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OnBreach__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOnBreachAccess().getMessageAssignment_3()); }
	(rule__OnBreach__MessageAssignment_3)
	{ after(grammarAccess.getOnBreachAccess().getMessageAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OnBreach__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OnBreach__Group__4__Impl
	rule__OnBreach__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__OnBreach__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOnBreachAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getOnBreachAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OnBreach__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OnBreach__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OnBreach__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOnBreachAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getOnBreachAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getNegationParserRuleCall_0()); }
	ruleNegation
	{ after(grammarAccess.getExpressionAccess().getNegationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
	(rule__Expression__Group_1__0)*
	{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getBinaryOperatorLeftAction_1_0()); }
	()
	{ after(grammarAccess.getExpressionAccess().getBinaryOperatorLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__1__Impl
	rule__Expression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getAlternatives_1_1()); }
	(rule__Expression__Alternatives_1_1)
	{ after(grammarAccess.getExpressionAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getRightAssignment_1_2()); }
	(rule__Expression__RightAssignment_1_2)
	{ after(grammarAccess.getExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Negation__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negation__Group_1__0__Impl
	rule__Negation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegationAccess().getUnaryOperatorAction_1_0()); }
	()
	{ after(grammarAccess.getNegationAccess().getUnaryOperatorAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negation__Group_1__1__Impl
	rule__Negation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegationAccess().getSymbolAssignment_1_1()); }
	(rule__Negation__SymbolAssignment_1_1)
	{ after(grammarAccess.getNegationAccess().getSymbolAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegationAccess().getExpressionAssignment_1_2()); }
	(rule__Negation__ExpressionAssignment_1_2)
	{ after(grammarAccess.getNegationAccess().getExpressionAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getPlusParserRuleCall_0()); }
	rulePlus
	{ after(grammarAccess.getComparisonAccess().getPlusParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGroup_1()); }
	(rule__Comparison__Group_1__0)*
	{ after(grammarAccess.getComparisonAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__0__Impl
	rule__Comparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getBinaryOperatorLeftAction_1_0()); }
	()
	{ after(grammarAccess.getComparisonAccess().getBinaryOperatorLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__1__Impl
	rule__Comparison__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getAlternatives_1_1()); }
	(rule__Comparison__Alternatives_1_1)
	{ after(grammarAccess.getComparisonAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_2()); }
	(rule__Comparison__RightAssignment_1_2)
	{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Plus__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group__0__Impl
	rule__Plus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getFactorParserRuleCall_0()); }
	ruleFactor
	{ after(grammarAccess.getPlusAccess().getFactorParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getGroup_1()); }
	(rule__Plus__Group_1__0)*
	{ after(grammarAccess.getPlusAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Plus__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group_1__0__Impl
	rule__Plus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getBinaryOperatorLeftAction_1_0()); }
	()
	{ after(grammarAccess.getPlusAccess().getBinaryOperatorLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group_1__1__Impl
	rule__Plus__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getAlternatives_1_1()); }
	(rule__Plus__Alternatives_1_1)
	{ after(grammarAccess.getPlusAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getRightAssignment_1_2()); }
	(rule__Plus__RightAssignment_1_2)
	{ after(grammarAccess.getPlusAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group__0__Impl
	rule__Factor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getNegativeParserRuleCall_0()); }
	ruleNegative
	{ after(grammarAccess.getFactorAccess().getNegativeParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getGroup_1()); }
	(rule__Factor__Group_1__0)*
	{ after(grammarAccess.getFactorAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__0__Impl
	rule__Factor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getBinaryOperatorLeftAction_1_0()); }
	()
	{ after(grammarAccess.getFactorAccess().getBinaryOperatorLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__1__Impl
	rule__Factor__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getAlternatives_1_1()); }
	(rule__Factor__Alternatives_1_1)
	{ after(grammarAccess.getFactorAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getRightAssignment_1_2()); }
	(rule__Factor__RightAssignment_1_2)
	{ after(grammarAccess.getFactorAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Negative__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negative__Group_1__0__Impl
	rule__Negative__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Negative__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegativeAccess().getUnaryOperatorAction_1_0()); }
	()
	{ after(grammarAccess.getNegativeAccess().getUnaryOperatorAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negative__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negative__Group_1__1__Impl
	rule__Negative__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Negative__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegativeAccess().getHyphenMinusKeyword_1_1()); }
	'-'
	{ after(grammarAccess.getNegativeAccess().getHyphenMinusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negative__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negative__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Negative__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegativeAccess().getExpressionAssignment_1_2()); }
	(rule__Negative__ExpressionAssignment_1_2)
	{ after(grammarAccess.getNegativeAccess().getExpressionAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__0__Impl
	rule__Primary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__1__Impl
	rule__Primary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_1_1()); }
	ruleExpression
	{ after(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getNameAssignment_0()); }
	(rule__FunctionCall__NameAssignment_0)
	{ after(grammarAccess.getFunctionCallAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__1__Impl
	rule__FunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__2__Impl
	rule__FunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getParamsAssignment_2()); }
	(rule__FunctionCall__ParamsAssignment_2)
	{ after(grammarAccess.getFunctionCallAccess().getParamsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__3__Impl
	rule__FunctionCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getGroup_3()); }
	(rule__FunctionCall__Group_3__0)*
	{ after(grammarAccess.getFunctionCallAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_3__0__Impl
	rule__FunctionCall__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getParamsAssignment_3_1()); }
	(rule__FunctionCall__ParamsAssignment_3_1)
	{ after(grammarAccess.getFunctionCallAccess().getParamsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getNameAssignment_0()); }
	(rule__Variable__NameAssignment_0)
	{ after(grammarAccess.getVariableAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__1__Impl
	rule__Variable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getVariableAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getAlternatives_2()); }
	(rule__Variable__Alternatives_2)
	{ after(grammarAccess.getVariableAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionTerm__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionTerm__Group__0__Impl
	rule__ExpressionTerm__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTerm__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionTermAccess().getNegationTermParserRuleCall_0()); }
	ruleNegationTerm
	{ after(grammarAccess.getExpressionTermAccess().getNegationTermParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTerm__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionTerm__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTerm__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionTermAccess().getGroup_1()); }
	(rule__ExpressionTerm__Group_1__0)*
	{ after(grammarAccess.getExpressionTermAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionTerm__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionTerm__Group_1__0__Impl
	rule__ExpressionTerm__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTerm__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionTermAccess().getBinaryTermOperatorLeftAction_1_0()); }
	()
	{ after(grammarAccess.getExpressionTermAccess().getBinaryTermOperatorLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTerm__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionTerm__Group_1__1__Impl
	rule__ExpressionTerm__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTerm__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionTermAccess().getAlternatives_1_1()); }
	(rule__ExpressionTerm__Alternatives_1_1)
	{ after(grammarAccess.getExpressionTermAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTerm__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionTerm__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTerm__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionTermAccess().getRightAssignment_1_2()); }
	(rule__ExpressionTerm__RightAssignment_1_2)
	{ after(grammarAccess.getExpressionTermAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NegationTerm__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NegationTerm__Group_1__0__Impl
	rule__NegationTerm__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationTerm__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegationTermAccess().getUnaryTermOperatorAction_1_0()); }
	()
	{ after(grammarAccess.getNegationTermAccess().getUnaryTermOperatorAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationTerm__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NegationTerm__Group_1__1__Impl
	rule__NegationTerm__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationTerm__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegationTermAccess().getSymbolAssignment_1_1()); }
	(rule__NegationTerm__SymbolAssignment_1_1)
	{ after(grammarAccess.getNegationTermAccess().getSymbolAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationTerm__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NegationTerm__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationTerm__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegationTermAccess().getExpressionTermAssignment_1_2()); }
	(rule__NegationTerm__ExpressionTermAssignment_1_2)
	{ after(grammarAccess.getNegationTermAccess().getExpressionTermAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_0__0__Impl
	rule__Term__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getTermAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_0__1__Impl
	rule__Term__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getExpressionTermParserRuleCall_0_1()); }
	ruleExpressionTerm
	{ after(grammarAccess.getTermAccess().getExpressionTermParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getTermAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group__0__Impl
	rule__ConditionalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getBeforeSymbolAssignment_0()); }
	(rule__ConditionalExpression__BeforeSymbolAssignment_0)?
	{ after(grammarAccess.getConditionalExpressionAccess().getBeforeSymbolAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group__1__Impl
	rule__ConditionalExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getWhenKeyword_1()); }
	'when'
	{ after(grammarAccess.getConditionalExpressionAccess().getWhenKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group__2__Impl
	rule__ConditionalExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getConditionalExpressionAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group__3__Impl
	rule__ConditionalExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getGroup_3()); }
	(rule__ConditionalExpression__Group_3__0)
	{ after(grammarAccess.getConditionalExpressionAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group__4__Impl
	rule__ConditionalExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getGroup_4()); }
	(rule__ConditionalExpression__Group_4__0)*
	{ after(grammarAccess.getConditionalExpressionAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group__5__Impl
	rule__ConditionalExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getConditionalExpressionAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group__6__Impl
	rule__ConditionalExpression__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getCheckKeyword_6()); }
	'check'
	{ after(grammarAccess.getConditionalExpressionAccess().getCheckKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group__7__Impl
	rule__ConditionalExpression__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getLeftCurlyBracketKeyword_7()); }
	'{'
	{ after(grammarAccess.getConditionalExpressionAccess().getLeftCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group__8__Impl
	rule__ConditionalExpression__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getExpressionTermAssignment_8()); }
	(rule__ConditionalExpression__ExpressionTermAssignment_8)
	{ after(grammarAccess.getConditionalExpressionAccess().getExpressionTermAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group__9__Impl
	rule__ConditionalExpression__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getRightCurlyBracketKeyword_9()); }
	'}'
	{ after(grammarAccess.getConditionalExpressionAccess().getRightCurlyBracketKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getAfterSymbolAssignment_10()); }
	(rule__ConditionalExpression__AfterSymbolAssignment_10)?
	{ after(grammarAccess.getConditionalExpressionAccess().getAfterSymbolAssignment_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_3__0__Impl
	rule__ConditionalExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getAlternatives_3_0()); }
	(rule__ConditionalExpression__Alternatives_3_0)
	{ after(grammarAccess.getConditionalExpressionAccess().getAlternatives_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getGroup_3_1()); }
	(rule__ConditionalExpression__Group_3_1__0)?
	{ after(grammarAccess.getConditionalExpressionAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_3_1__0__Impl
	rule__ConditionalExpression__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getComparisonOperatorAssignment_3_1_0()); }
	(rule__ConditionalExpression__ComparisonOperatorAssignment_3_1_0)
	{ after(grammarAccess.getConditionalExpressionAccess().getComparisonOperatorAssignment_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getAlternatives_3_1_1()); }
	(rule__ConditionalExpression__Alternatives_3_1_1)
	{ after(grammarAccess.getConditionalExpressionAccess().getAlternatives_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_4__0__Impl
	rule__ConditionalExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getLogicalOperatorAssignment_4_0()); }
	(rule__ConditionalExpression__LogicalOperatorAssignment_4_0)
	{ after(grammarAccess.getConditionalExpressionAccess().getLogicalOperatorAssignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_4__1__Impl
	rule__ConditionalExpression__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getQualifiedNameParserRuleCall_4_1()); }
	ruleQualifiedName
	{ after(grammarAccess.getConditionalExpressionAccess().getQualifiedNameParserRuleCall_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getGroup_4_2()); }
	(rule__ConditionalExpression__Group_4_2__0)?
	{ after(grammarAccess.getConditionalExpressionAccess().getGroup_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_4_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_4_2__0__Impl
	rule__ConditionalExpression__Group_4_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_4_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getComparisonOperatorAssignment_4_2_0()); }
	(rule__ConditionalExpression__ComparisonOperatorAssignment_4_2_0)
	{ after(grammarAccess.getConditionalExpressionAccess().getComparisonOperatorAssignment_4_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_4_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalExpression__Group_4_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_4_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalExpressionAccess().getAlternatives_4_2_1()); }
	(rule__ConditionalExpression__Alternatives_4_2_1)
	{ after(grammarAccess.getConditionalExpressionAccess().getAlternatives_4_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TimeInterval__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeInterval__Group__0__Impl
	rule__TimeInterval__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeInterval__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeIntervalAccess().getTimeIntervalKeyword_0()); }
	'TimeInterval'
	{ after(grammarAccess.getTimeIntervalAccess().getTimeIntervalKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeInterval__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeInterval__Group__1__Impl
	rule__TimeInterval__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeInterval__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeIntervalAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getTimeIntervalAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeInterval__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeInterval__Group__2__Impl
	rule__TimeInterval__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeInterval__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeIntervalAccess().getStartAssignment_2()); }
	(rule__TimeInterval__StartAssignment_2)
	{ after(grammarAccess.getTimeIntervalAccess().getStartAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeInterval__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeInterval__Group__3__Impl
	rule__TimeInterval__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeInterval__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeIntervalAccess().getToKeyword_3()); }
	'to'
	{ after(grammarAccess.getTimeIntervalAccess().getToKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeInterval__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeInterval__Group__4__Impl
	rule__TimeInterval__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeInterval__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeIntervalAccess().getEndAssignment_4()); }
	(rule__TimeInterval__EndAssignment_4)
	{ after(grammarAccess.getTimeIntervalAccess().getEndAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeInterval__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeInterval__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeInterval__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeIntervalAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getTimeIntervalAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SessionInterval__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SessionInterval__Group__0__Impl
	rule__SessionInterval__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SessionInterval__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSessionIntervalAccess().getSessionIntervalKeyword_0()); }
	'SessionInterval'
	{ after(grammarAccess.getSessionIntervalAccess().getSessionIntervalKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SessionInterval__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SessionInterval__Group__1__Impl
	rule__SessionInterval__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SessionInterval__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSessionIntervalAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getSessionIntervalAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SessionInterval__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SessionInterval__Group__2__Impl
	rule__SessionInterval__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SessionInterval__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSessionIntervalAccess().getFrequencyAssignment_2()); }
	(rule__SessionInterval__FrequencyAssignment_2)
	{ after(grammarAccess.getSessionIntervalAccess().getFrequencyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SessionInterval__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SessionInterval__Group__3__Impl
	rule__SessionInterval__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SessionInterval__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSessionIntervalAccess().getTimeUnitAssignment_3()); }
	(rule__SessionInterval__TimeUnitAssignment_3)
	{ after(grammarAccess.getSessionIntervalAccess().getTimeUnitAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SessionInterval__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SessionInterval__Group__4__Impl
	rule__SessionInterval__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SessionInterval__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSessionIntervalAccess().getGroup_4()); }
	(rule__SessionInterval__Group_4__0)?
	{ after(grammarAccess.getSessionIntervalAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SessionInterval__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SessionInterval__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SessionInterval__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSessionIntervalAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getSessionIntervalAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SessionInterval__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SessionInterval__Group_4__0__Impl
	rule__SessionInterval__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SessionInterval__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSessionIntervalAccess().getPerKeyword_4_0()); }
	'per'
	{ after(grammarAccess.getSessionIntervalAccess().getPerKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SessionInterval__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SessionInterval__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SessionInterval__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSessionIntervalAccess().getAlternatives_4_1()); }
	(rule__SessionInterval__Alternatives_4_1)
	{ after(grammarAccess.getSessionIntervalAccess().getAlternatives_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Timeout__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Timeout__Group__0__Impl
	rule__Timeout__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Timeout__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeoutAccess().getTimeoutKeyword_0()); }
	'Timeout'
	{ after(grammarAccess.getTimeoutAccess().getTimeoutKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Timeout__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Timeout__Group__1__Impl
	rule__Timeout__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Timeout__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeoutAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getTimeoutAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Timeout__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Timeout__Group__2__Impl
	rule__Timeout__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Timeout__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeoutAccess().getSecondsAssignment_2()); }
	(rule__Timeout__SecondsAssignment_2)
	{ after(grammarAccess.getTimeoutAccess().getSecondsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Timeout__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Timeout__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Timeout__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeoutAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getTimeoutAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MaxNumberOfOperation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MaxNumberOfOperation__Group__0__Impl
	rule__MaxNumberOfOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxNumberOfOperation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMaxNumberOfOperationAccess().getMaxNumberOfOperationKeyword_0()); }
	'MaxNumberOfOperation'
	{ after(grammarAccess.getMaxNumberOfOperationAccess().getMaxNumberOfOperationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxNumberOfOperation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MaxNumberOfOperation__Group__1__Impl
	rule__MaxNumberOfOperation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxNumberOfOperation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMaxNumberOfOperationAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getMaxNumberOfOperationAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxNumberOfOperation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MaxNumberOfOperation__Group__2__Impl
	rule__MaxNumberOfOperation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxNumberOfOperation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMaxNumberOfOperationAccess().getOperationsNumberAssignment_2()); }
	(rule__MaxNumberOfOperation__OperationsNumberAssignment_2)
	{ after(grammarAccess.getMaxNumberOfOperationAccess().getOperationsNumberAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxNumberOfOperation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MaxNumberOfOperation__Group__3__Impl
	rule__MaxNumberOfOperation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxNumberOfOperation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMaxNumberOfOperationAccess().getGroup_3()); }
	(rule__MaxNumberOfOperation__Group_3__0)?
	{ after(grammarAccess.getMaxNumberOfOperationAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxNumberOfOperation__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MaxNumberOfOperation__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxNumberOfOperation__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMaxNumberOfOperationAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getMaxNumberOfOperationAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MaxNumberOfOperation__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MaxNumberOfOperation__Group_3__0__Impl
	rule__MaxNumberOfOperation__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxNumberOfOperation__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMaxNumberOfOperationAccess().getPerKeyword_3_0()); }
	'per'
	{ after(grammarAccess.getMaxNumberOfOperationAccess().getPerKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxNumberOfOperation__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MaxNumberOfOperation__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxNumberOfOperation__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMaxNumberOfOperationAccess().getTimeUnitAssignment_3_1()); }
	(rule__MaxNumberOfOperation__TimeUnitAssignment_3_1)
	{ after(grammarAccess.getMaxNumberOfOperationAccess().getTimeUnitAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WeekDaysInterval__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WeekDaysInterval__Group__0__Impl
	rule__WeekDaysInterval__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WeekDaysInterval__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWeekDaysIntervalAccess().getWeekDaysIntervalKeyword_0()); }
	'WeekDaysInterval'
	{ after(grammarAccess.getWeekDaysIntervalAccess().getWeekDaysIntervalKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WeekDaysInterval__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WeekDaysInterval__Group__1__Impl
	rule__WeekDaysInterval__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WeekDaysInterval__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWeekDaysIntervalAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getWeekDaysIntervalAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WeekDaysInterval__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WeekDaysInterval__Group__2__Impl
	rule__WeekDaysInterval__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WeekDaysInterval__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWeekDaysIntervalAccess().getStartAssignment_2()); }
	(rule__WeekDaysInterval__StartAssignment_2)
	{ after(grammarAccess.getWeekDaysIntervalAccess().getStartAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WeekDaysInterval__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WeekDaysInterval__Group__3__Impl
	rule__WeekDaysInterval__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WeekDaysInterval__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWeekDaysIntervalAccess().getToKeyword_3()); }
	'to'
	{ after(grammarAccess.getWeekDaysIntervalAccess().getToKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WeekDaysInterval__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WeekDaysInterval__Group__4__Impl
	rule__WeekDaysInterval__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__WeekDaysInterval__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWeekDaysIntervalAccess().getEndAssignment_4()); }
	(rule__WeekDaysInterval__EndAssignment_4)
	{ after(grammarAccess.getWeekDaysIntervalAccess().getEndAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WeekDaysInterval__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WeekDaysInterval__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WeekDaysInterval__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWeekDaysIntervalAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getWeekDaysIntervalAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MessageContent__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MessageContent__Group__0__Impl
	rule__MessageContent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageContent__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMessageContentAccess().getMessageContentKeyword_0()); }
	'MessageContent'
	{ after(grammarAccess.getMessageContentAccess().getMessageContentKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageContent__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MessageContent__Group__1__Impl
	rule__MessageContent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageContent__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMessageContentAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getMessageContentAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageContent__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MessageContent__Group__2__Impl
	rule__MessageContent__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageContent__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMessageContentAccess().getAlternatives_2()); }
	(rule__MessageContent__Alternatives_2)
	{ after(grammarAccess.getMessageContentAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageContent__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MessageContent__Group__3__Impl
	rule__MessageContent__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageContent__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMessageContentAccess().getGroup_3()); }
	(rule__MessageContent__Group_3__0)?
	{ after(grammarAccess.getMessageContentAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageContent__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MessageContent__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageContent__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMessageContentAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getMessageContentAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MessageContent__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MessageContent__Group_3__0__Impl
	rule__MessageContent__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageContent__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMessageContentAccess().getComparisonOperatorAssignment_3_0()); }
	(rule__MessageContent__ComparisonOperatorAssignment_3_0)
	{ after(grammarAccess.getMessageContentAccess().getComparisonOperatorAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageContent__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MessageContent__Group_3__1__Impl
	rule__MessageContent__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageContent__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMessageContentAccess().getExpressionAssignment_3_1()); }
	(rule__MessageContent__ExpressionAssignment_3_1)
	{ after(grammarAccess.getMessageContentAccess().getExpressionAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageContent__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MessageContent__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageContent__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMessageContentAccess().getGroup_3_2()); }
	(rule__MessageContent__Group_3_2__0)?
	{ after(grammarAccess.getMessageContentAccess().getGroup_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MessageContent__Group_3_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MessageContent__Group_3_2__0__Impl
	rule__MessageContent__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageContent__Group_3_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMessageContentAccess().getPerKeyword_3_2_0()); }
	'per'
	{ after(grammarAccess.getMessageContentAccess().getPerKeyword_3_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageContent__Group_3_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MessageContent__Group_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageContent__Group_3_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMessageContentAccess().getTimeUnitAssignment_3_2_1()); }
	(rule__MessageContent__TimeUnitAssignment_3_2_1)
	{ after(grammarAccess.getMessageContentAccess().getTimeUnitAssignment_3_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
	(rule__QualifiedName__Group_1__0)*
	{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildcard__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedNameWithWildcard__Group__0__Impl
	rule__QualifiedNameWithWildcard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
	{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedNameWithWildcard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
	'.*'
	{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ImportsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0()); }
		ruleImport
		{ after(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ContractAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getContractContractParserRuleCall_1_0()); }
		ruleContract
		{ after(grammarAccess.getModelAccess().getContractContractParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
		ruleQualifiedNameWithWildcard
		{ after(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContractAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getContractAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__BeginDateAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContractAccess().getBeginDateSTRINGTerminalRuleCall_7_0()); }
		RULE_STRING
		{ after(grammarAccess.getContractAccess().getBeginDateSTRINGTerminalRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__DueDateAssignment_10
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContractAccess().getDueDateSTRINGTerminalRuleCall_10_0()); }
		RULE_STRING
		{ after(grammarAccess.getContractAccess().getDueDateSTRINGTerminalRuleCall_10_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__ApplicationAssignment_14
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContractAccess().getApplicationApplicationParserRuleCall_14_0()); }
		ruleApplication
		{ after(grammarAccess.getContractAccess().getApplicationApplicationParserRuleCall_14_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__ProcessAssignment_15
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContractAccess().getProcessProcessParserRuleCall_15_0()); }
		ruleProcess
		{ after(grammarAccess.getContractAccess().getProcessProcessParserRuleCall_15_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__VariablesAssignment_17_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContractAccess().getVariablesVariableParserRuleCall_17_2_0()); }
		ruleVariable
		{ after(grammarAccess.getContractAccess().getVariablesVariableParserRuleCall_17_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contract__ClausesAssignment_20
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContractAccess().getClausesClauseParserRuleCall_20_0()); }
		ruleClause
		{ after(grammarAccess.getContractAccess().getClausesClauseParserRuleCall_20_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__RolePlayerAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getRolePlayerRolePlayerEnumRuleCall_4_0()); }
		ruleRolePlayer
		{ after(grammarAccess.getClauseAccess().getRolePlayerRolePlayerEnumRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__OperationAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getOperationOperationEnumRuleCall_7_0()); }
		ruleOperation
		{ after(grammarAccess.getClauseAccess().getOperationOperationEnumRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__TermsAssignment_10
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getTermsTermsParserRuleCall_10_0()); }
		ruleTerms
		{ after(grammarAccess.getClauseAccess().getTermsTermsParserRuleCall_10_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__EventLogAssignment_12
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getEventLogEventLogParserRuleCall_12_0()); }
		ruleEventLog
		{ after(grammarAccess.getClauseAccess().getEventLogEventLogParserRuleCall_12_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRightAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getRightAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Obligation__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObligationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getObligationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prohibition__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProhibitionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getProhibitionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getApplicationAccess().getNameSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getApplicationAccess().getNameSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessAccess().getNameSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getProcessAccess().getNameSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OnSuccess__MessageAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOnSuccessAccess().getMessageSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getOnSuccessAccess().getMessageSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OnBreach__MessageAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOnBreachAccess().getMessageSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getOnBreachAccess().getMessageSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__SymbolAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getSymbolANDKeyword_1_1_0_0()); }
		(
			{ before(grammarAccess.getExpressionAccess().getSymbolANDKeyword_1_1_0_0()); }
			'AND'
			{ after(grammarAccess.getExpressionAccess().getSymbolANDKeyword_1_1_0_0()); }
		)
		{ after(grammarAccess.getExpressionAccess().getSymbolANDKeyword_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__SymbolAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getSymbolORKeyword_1_1_1_0()); }
		(
			{ before(grammarAccess.getExpressionAccess().getSymbolORKeyword_1_1_1_0()); }
			'OR'
			{ after(grammarAccess.getExpressionAccess().getSymbolORKeyword_1_1_1_0()); }
		)
		{ after(grammarAccess.getExpressionAccess().getSymbolORKeyword_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getRightNegationParserRuleCall_1_2_0()); }
		ruleNegation
		{ after(grammarAccess.getExpressionAccess().getRightNegationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__SymbolAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegationAccess().getSymbolExclamationMarkKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getNegationAccess().getSymbolExclamationMarkKeyword_1_1_0()); }
			'!'
			{ after(grammarAccess.getNegationAccess().getSymbolExclamationMarkKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getNegationAccess().getSymbolExclamationMarkKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__ExpressionAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegationAccess().getExpressionComparisonParserRuleCall_1_2_0()); }
		ruleComparison
		{ after(grammarAccess.getNegationAccess().getExpressionComparisonParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__SymbolAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getSymbolLessThanSignEqualsSignKeyword_1_1_0_0()); }
		(
			{ before(grammarAccess.getComparisonAccess().getSymbolLessThanSignEqualsSignKeyword_1_1_0_0()); }
			'<='
			{ after(grammarAccess.getComparisonAccess().getSymbolLessThanSignEqualsSignKeyword_1_1_0_0()); }
		)
		{ after(grammarAccess.getComparisonAccess().getSymbolLessThanSignEqualsSignKeyword_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__SymbolAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getSymbolGreaterThanSignEqualsSignKeyword_1_1_1_0()); }
		(
			{ before(grammarAccess.getComparisonAccess().getSymbolGreaterThanSignEqualsSignKeyword_1_1_1_0()); }
			'>='
			{ after(grammarAccess.getComparisonAccess().getSymbolGreaterThanSignEqualsSignKeyword_1_1_1_0()); }
		)
		{ after(grammarAccess.getComparisonAccess().getSymbolGreaterThanSignEqualsSignKeyword_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__SymbolAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getSymbolGreaterThanSignKeyword_1_1_2_0()); }
		(
			{ before(grammarAccess.getComparisonAccess().getSymbolGreaterThanSignKeyword_1_1_2_0()); }
			'>'
			{ after(grammarAccess.getComparisonAccess().getSymbolGreaterThanSignKeyword_1_1_2_0()); }
		)
		{ after(grammarAccess.getComparisonAccess().getSymbolGreaterThanSignKeyword_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__SymbolAssignment_1_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getSymbolLessThanSignKeyword_1_1_3_0()); }
		(
			{ before(grammarAccess.getComparisonAccess().getSymbolLessThanSignKeyword_1_1_3_0()); }
			'<'
			{ after(grammarAccess.getComparisonAccess().getSymbolLessThanSignKeyword_1_1_3_0()); }
		)
		{ after(grammarAccess.getComparisonAccess().getSymbolLessThanSignKeyword_1_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__SymbolAssignment_1_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getSymbolExclamationMarkEqualsSignKeyword_1_1_4_0()); }
		(
			{ before(grammarAccess.getComparisonAccess().getSymbolExclamationMarkEqualsSignKeyword_1_1_4_0()); }
			'!='
			{ after(grammarAccess.getComparisonAccess().getSymbolExclamationMarkEqualsSignKeyword_1_1_4_0()); }
		)
		{ after(grammarAccess.getComparisonAccess().getSymbolExclamationMarkEqualsSignKeyword_1_1_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__SymbolAssignment_1_1_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getSymbolEqualsSignEqualsSignKeyword_1_1_5_0()); }
		(
			{ before(grammarAccess.getComparisonAccess().getSymbolEqualsSignEqualsSignKeyword_1_1_5_0()); }
			'=='
			{ after(grammarAccess.getComparisonAccess().getSymbolEqualsSignEqualsSignKeyword_1_1_5_0()); }
		)
		{ after(grammarAccess.getComparisonAccess().getSymbolEqualsSignEqualsSignKeyword_1_1_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__SymbolAssignment_1_1_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getSymbolIsKeyword_1_1_6_0()); }
		(
			{ before(grammarAccess.getComparisonAccess().getSymbolIsKeyword_1_1_6_0()); }
			'is'
			{ after(grammarAccess.getComparisonAccess().getSymbolIsKeyword_1_1_6_0()); }
		)
		{ after(grammarAccess.getComparisonAccess().getSymbolIsKeyword_1_1_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__SymbolAssignment_1_1_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getSymbolAsKeyword_1_1_7_0()); }
		(
			{ before(grammarAccess.getComparisonAccess().getSymbolAsKeyword_1_1_7_0()); }
			'as'
			{ after(grammarAccess.getComparisonAccess().getSymbolAsKeyword_1_1_7_0()); }
		)
		{ after(grammarAccess.getComparisonAccess().getSymbolAsKeyword_1_1_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getRightPlusParserRuleCall_1_2_0()); }
		rulePlus
		{ after(grammarAccess.getComparisonAccess().getRightPlusParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusAccess().getRightFactorParserRuleCall_1_2_0()); }
		ruleFactor
		{ after(grammarAccess.getPlusAccess().getRightFactorParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getRightNegativeParserRuleCall_1_2_0()); }
		ruleNegative
		{ after(grammarAccess.getFactorAccess().getRightNegativeParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negative__ExpressionAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegativeAccess().getExpressionPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getNegativeAccess().getExpressionPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericValueAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getNumericValueAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableValueAccess().getValueQualifiedNameParserRuleCall_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getVariableValueAccess().getValueQualifiedNameParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getNameQualifiedNameParserRuleCall_0_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getFunctionCallAccess().getNameQualifiedNameParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ParamsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getParamsExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getFunctionCallAccess().getParamsExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ParamsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getParamsExpressionParserRuleCall_3_1_0()); }
		ruleExpression
		{ after(grammarAccess.getFunctionCallAccess().getParamsExpressionParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__ExpressionAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getExpressionExpressionParserRuleCall_2_0_0()); }
		ruleExpression
		{ after(grammarAccess.getVariableAccess().getExpressionExpressionParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__TermAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getTermAlternatives_2_1_0()); }
		(rule__Variable__TermAlternatives_2_1_0)
		{ after(grammarAccess.getVariableAccess().getTermAlternatives_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terms__ExpressionTermAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermsAccess().getExpressionTermExpressionTermParserRuleCall_0_0()); }
		ruleExpressionTerm
		{ after(grammarAccess.getTermsAccess().getExpressionTermExpressionTermParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terms__ConditionalExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermsAccess().getConditionalExpressionConditionalExpressionParserRuleCall_1_0()); }
		ruleConditionalExpression
		{ after(grammarAccess.getTermsAccess().getConditionalExpressionConditionalExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTerm__SymbolAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionTermAccess().getSymbolCommaKeyword_1_1_0_0()); }
		(
			{ before(grammarAccess.getExpressionTermAccess().getSymbolCommaKeyword_1_1_0_0()); }
			','
			{ after(grammarAccess.getExpressionTermAccess().getSymbolCommaKeyword_1_1_0_0()); }
		)
		{ after(grammarAccess.getExpressionTermAccess().getSymbolCommaKeyword_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTerm__SymbolAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionTermAccess().getSymbolORKeyword_1_1_1_0()); }
		(
			{ before(grammarAccess.getExpressionTermAccess().getSymbolORKeyword_1_1_1_0()); }
			'OR'
			{ after(grammarAccess.getExpressionTermAccess().getSymbolORKeyword_1_1_1_0()); }
		)
		{ after(grammarAccess.getExpressionTermAccess().getSymbolORKeyword_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTerm__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionTermAccess().getRightNegationTermParserRuleCall_1_2_0()); }
		ruleNegationTerm
		{ after(grammarAccess.getExpressionTermAccess().getRightNegationTermParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationTerm__SymbolAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegationTermAccess().getSymbolNOTKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getNegationTermAccess().getSymbolNOTKeyword_1_1_0()); }
			'NOT'
			{ after(grammarAccess.getNegationTermAccess().getSymbolNOTKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getNegationTermAccess().getSymbolNOTKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationTerm__ExpressionTermAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegationTermAccess().getExpressionTermTermParserRuleCall_1_2_0()); }
		ruleTerm
		{ after(grammarAccess.getNegationTermAccess().getExpressionTermTermParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__BeforeSymbolAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getBeforeSymbolLogicalOperatorParserRuleCall_0_0()); }
		ruleLogicalOperator
		{ after(grammarAccess.getConditionalExpressionAccess().getBeforeSymbolLogicalOperatorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__ComparisonOperatorAssignment_3_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getComparisonOperatorComparisonOperatorParserRuleCall_3_1_0_0()); }
		ruleComparisonOperator
		{ after(grammarAccess.getConditionalExpressionAccess().getComparisonOperatorComparisonOperatorParserRuleCall_3_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__LogicalOperatorAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getLogicalOperatorLogicalOperatorParserRuleCall_4_0_0()); }
		ruleLogicalOperator
		{ after(grammarAccess.getConditionalExpressionAccess().getLogicalOperatorLogicalOperatorParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__ComparisonOperatorAssignment_4_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getComparisonOperatorComparisonOperatorParserRuleCall_4_2_0_0()); }
		ruleComparisonOperator
		{ after(grammarAccess.getConditionalExpressionAccess().getComparisonOperatorComparisonOperatorParserRuleCall_4_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__ExpressionTermAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getExpressionTermExpressionTermParserRuleCall_8_0()); }
		ruleExpressionTerm
		{ after(grammarAccess.getConditionalExpressionAccess().getExpressionTermExpressionTermParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__AfterSymbolAssignment_10
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalExpressionAccess().getAfterSymbolLogicalOperatorParserRuleCall_10_0()); }
		ruleLogicalOperator
		{ after(grammarAccess.getConditionalExpressionAccess().getAfterSymbolLogicalOperatorParserRuleCall_10_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperator__SymbolAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getSymbolAlternatives_0()); }
		(rule__LogicalOperator__SymbolAlternatives_0)
		{ after(grammarAccess.getLogicalOperatorAccess().getSymbolAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeInterval__StartAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeIntervalAccess().getStartSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getTimeIntervalAccess().getStartSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeInterval__EndAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeIntervalAccess().getEndSTRINGTerminalRuleCall_4_0()); }
		RULE_STRING
		{ after(grammarAccess.getTimeIntervalAccess().getEndSTRINGTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SessionInterval__FrequencyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSessionIntervalAccess().getFrequencyINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getSessionIntervalAccess().getFrequencyINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SessionInterval__TimeUnitAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSessionIntervalAccess().getTimeUnitTimeUnitEnumRuleCall_3_0()); }
		ruleTimeUnit
		{ after(grammarAccess.getSessionIntervalAccess().getTimeUnitTimeUnitEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SessionInterval__MessageContentAssignment_4_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSessionIntervalAccess().getMessageContentMessageContentParserRuleCall_4_1_0_0()); }
		ruleMessageContent
		{ after(grammarAccess.getSessionIntervalAccess().getMessageContentMessageContentParserRuleCall_4_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SessionInterval__ValueAssignment_4_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSessionIntervalAccess().getValueSTRINGTerminalRuleCall_4_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getSessionIntervalAccess().getValueSTRINGTerminalRuleCall_4_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Timeout__SecondsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeoutAccess().getSecondsINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getTimeoutAccess().getSecondsINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxNumberOfOperation__OperationsNumberAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMaxNumberOfOperationAccess().getOperationsNumberINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getMaxNumberOfOperationAccess().getOperationsNumberINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxNumberOfOperation__TimeUnitAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMaxNumberOfOperationAccess().getTimeUnitTimeUnitEnumRuleCall_3_1_0()); }
		ruleTimeUnit
		{ after(grammarAccess.getMaxNumberOfOperationAccess().getTimeUnitTimeUnitEnumRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WeekDaysInterval__StartAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWeekDaysIntervalAccess().getStartWeekDayEnumRuleCall_2_0()); }
		ruleWeekDay
		{ after(grammarAccess.getWeekDaysIntervalAccess().getStartWeekDayEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WeekDaysInterval__EndAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWeekDaysIntervalAccess().getEndWeekDayEnumRuleCall_4_0()); }
		ruleWeekDay
		{ after(grammarAccess.getWeekDaysIntervalAccess().getEndWeekDayEnumRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageContent__ContentAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMessageContentAccess().getContentSTRINGTerminalRuleCall_2_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getMessageContentAccess().getContentSTRINGTerminalRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageContent__ComparisonOperatorAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMessageContentAccess().getComparisonOperatorComparisonOperatorParserRuleCall_3_0_0()); }
		ruleComparisonOperator
		{ after(grammarAccess.getMessageContentAccess().getComparisonOperatorComparisonOperatorParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageContent__ExpressionAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMessageContentAccess().getExpressionExpressionParserRuleCall_3_1_0()); }
		ruleExpression
		{ after(grammarAccess.getMessageContentAccess().getExpressionExpressionParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageContent__TimeUnitAssignment_3_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMessageContentAccess().getTimeUnitTimeUnitEnumRuleCall_3_2_1_0()); }
		ruleTimeUnit
		{ after(grammarAccess.getMessageContentAccess().getTimeUnitTimeUnitEnumRuleCall_3_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperator__SymbolAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getSymbolLessThanSignEqualsSignKeyword_0_0()); }
		(
			{ before(grammarAccess.getComparisonOperatorAccess().getSymbolLessThanSignEqualsSignKeyword_0_0()); }
			'<='
			{ after(grammarAccess.getComparisonOperatorAccess().getSymbolLessThanSignEqualsSignKeyword_0_0()); }
		)
		{ after(grammarAccess.getComparisonOperatorAccess().getSymbolLessThanSignEqualsSignKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperator__SymbolAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getSymbolGreaterThanSignEqualsSignKeyword_1_0()); }
		(
			{ before(grammarAccess.getComparisonOperatorAccess().getSymbolGreaterThanSignEqualsSignKeyword_1_0()); }
			'>='
			{ after(grammarAccess.getComparisonOperatorAccess().getSymbolGreaterThanSignEqualsSignKeyword_1_0()); }
		)
		{ after(grammarAccess.getComparisonOperatorAccess().getSymbolGreaterThanSignEqualsSignKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperator__SymbolAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getSymbolGreaterThanSignKeyword_2_0()); }
		(
			{ before(grammarAccess.getComparisonOperatorAccess().getSymbolGreaterThanSignKeyword_2_0()); }
			'>'
			{ after(grammarAccess.getComparisonOperatorAccess().getSymbolGreaterThanSignKeyword_2_0()); }
		)
		{ after(grammarAccess.getComparisonOperatorAccess().getSymbolGreaterThanSignKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperator__SymbolAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getSymbolLessThanSignKeyword_3_0()); }
		(
			{ before(grammarAccess.getComparisonOperatorAccess().getSymbolLessThanSignKeyword_3_0()); }
			'<'
			{ after(grammarAccess.getComparisonOperatorAccess().getSymbolLessThanSignKeyword_3_0()); }
		)
		{ after(grammarAccess.getComparisonOperatorAccess().getSymbolLessThanSignKeyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperator__SymbolAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getSymbolExclamationMarkEqualsSignKeyword_4_0()); }
		(
			{ before(grammarAccess.getComparisonOperatorAccess().getSymbolExclamationMarkEqualsSignKeyword_4_0()); }
			'!='
			{ after(grammarAccess.getComparisonOperatorAccess().getSymbolExclamationMarkEqualsSignKeyword_4_0()); }
		)
		{ after(grammarAccess.getComparisonOperatorAccess().getSymbolExclamationMarkEqualsSignKeyword_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperator__SymbolAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getSymbolEqualsSignEqualsSignKeyword_5_0()); }
		(
			{ before(grammarAccess.getComparisonOperatorAccess().getSymbolEqualsSignEqualsSignKeyword_5_0()); }
			'=='
			{ after(grammarAccess.getComparisonOperatorAccess().getSymbolEqualsSignEqualsSignKeyword_5_0()); }
		)
		{ after(grammarAccess.getComparisonOperatorAccess().getSymbolEqualsSignEqualsSignKeyword_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
