/*
 * generated by Xtext 2.31.0
 */
package br.edu.unijui.gca.jabuti.ide.contentassist.antlr;

import br.edu.unijui.gca.jabuti.ide.contentassist.antlr.internal.InternalJabutiParser;
import br.edu.unijui.gca.jabuti.services.JabutiGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class JabutiParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(JabutiGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, JabutiGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getClauseAccess().getAlternatives_0(), "rule__Clause__Alternatives_0");
			builder.put(grammarAccess.getPartyAccess().getAlternatives(), "rule__Party__Alternatives");
			builder.put(grammarAccess.getEventLogAccess().getAlternatives(), "rule__EventLog__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives_1_1(), "rule__Expression__Alternatives_1_1");
			builder.put(grammarAccess.getNegationAccess().getAlternatives(), "rule__Negation__Alternatives");
			builder.put(grammarAccess.getComparisonAccess().getAlternatives_1_1(), "rule__Comparison__Alternatives_1_1");
			builder.put(grammarAccess.getPlusAccess().getAlternatives_1_1(), "rule__Plus__Alternatives_1_1");
			builder.put(grammarAccess.getFactorAccess().getAlternatives_1_1(), "rule__Factor__Alternatives_1_1");
			builder.put(grammarAccess.getNegativeAccess().getAlternatives(), "rule__Negative__Alternatives");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getLiteralValueAccess().getAlternatives(), "rule__LiteralValue__Alternatives");
			builder.put(grammarAccess.getVariableAccess().getAlternatives_2(), "rule__Variable__Alternatives_2");
			builder.put(grammarAccess.getVariableAccess().getTermAlternatives_2_1_0(), "rule__Variable__TermAlternatives_2_1_0");
			builder.put(grammarAccess.getTermsAccess().getAlternatives(), "rule__Terms__Alternatives");
			builder.put(grammarAccess.getExpressionTermAccess().getAlternatives_1_1(), "rule__ExpressionTerm__Alternatives_1_1");
			builder.put(grammarAccess.getNegationTermAccess().getAlternatives(), "rule__NegationTerm__Alternatives");
			builder.put(grammarAccess.getTermAccess().getAlternatives(), "rule__Term__Alternatives");
			builder.put(grammarAccess.getConditionalExpressionAccess().getAlternatives_3_0(), "rule__ConditionalExpression__Alternatives_3_0");
			builder.put(grammarAccess.getConditionalExpressionAccess().getAlternatives_3_1_1(), "rule__ConditionalExpression__Alternatives_3_1_1");
			builder.put(grammarAccess.getConditionalExpressionAccess().getAlternatives_4_2_1(), "rule__ConditionalExpression__Alternatives_4_2_1");
			builder.put(grammarAccess.getLogicalOperatorAccess().getSymbolAlternatives_0(), "rule__LogicalOperator__SymbolAlternatives_0");
			builder.put(grammarAccess.getSessionIntervalAccess().getAlternatives_4_1(), "rule__SessionInterval__Alternatives_4_1");
			builder.put(grammarAccess.getMessageContentAccess().getAlternatives_2(), "rule__MessageContent__Alternatives_2");
			builder.put(grammarAccess.getComparisonOperatorAccess().getAlternatives(), "rule__ComparisonOperator__Alternatives");
			builder.put(grammarAccess.getRolePlayerAccess().getAlternatives(), "rule__RolePlayer__Alternatives");
			builder.put(grammarAccess.getOperationAccess().getAlternatives(), "rule__Operation__Alternatives");
			builder.put(grammarAccess.getWeekDayAccess().getAlternatives(), "rule__WeekDay__Alternatives");
			builder.put(grammarAccess.getTimeUnitAccess().getAlternatives(), "rule__TimeUnit__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getContractAccess().getGroup(), "rule__Contract__Group__0");
			builder.put(grammarAccess.getContractAccess().getGroup_17(), "rule__Contract__Group_17__0");
			builder.put(grammarAccess.getClauseAccess().getGroup(), "rule__Clause__Group__0");
			builder.put(grammarAccess.getRightAccess().getGroup(), "rule__Right__Group__0");
			builder.put(grammarAccess.getObligationAccess().getGroup(), "rule__Obligation__Group__0");
			builder.put(grammarAccess.getProhibitionAccess().getGroup(), "rule__Prohibition__Group__0");
			builder.put(grammarAccess.getApplicationAccess().getGroup(), "rule__Application__Group__0");
			builder.put(grammarAccess.getProcessAccess().getGroup(), "rule__Process__Group__0");
			builder.put(grammarAccess.getOnSuccessAccess().getGroup(), "rule__OnSuccess__Group__0");
			builder.put(grammarAccess.getOnBreachAccess().getGroup(), "rule__OnBreach__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
			builder.put(grammarAccess.getNegationAccess().getGroup_1(), "rule__Negation__Group_1__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
			builder.put(grammarAccess.getPlusAccess().getGroup(), "rule__Plus__Group__0");
			builder.put(grammarAccess.getPlusAccess().getGroup_1(), "rule__Plus__Group_1__0");
			builder.put(grammarAccess.getFactorAccess().getGroup(), "rule__Factor__Group__0");
			builder.put(grammarAccess.getFactorAccess().getGroup_1(), "rule__Factor__Group_1__0");
			builder.put(grammarAccess.getNegativeAccess().getGroup_1(), "rule__Negative__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_3(), "rule__FunctionCall__Group_3__0");
			builder.put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
			builder.put(grammarAccess.getExpressionTermAccess().getGroup(), "rule__ExpressionTerm__Group__0");
			builder.put(grammarAccess.getExpressionTermAccess().getGroup_1(), "rule__ExpressionTerm__Group_1__0");
			builder.put(grammarAccess.getNegationTermAccess().getGroup_1(), "rule__NegationTerm__Group_1__0");
			builder.put(grammarAccess.getTermAccess().getGroup_0(), "rule__Term__Group_0__0");
			builder.put(grammarAccess.getConditionalExpressionAccess().getGroup(), "rule__ConditionalExpression__Group__0");
			builder.put(grammarAccess.getConditionalExpressionAccess().getGroup_3(), "rule__ConditionalExpression__Group_3__0");
			builder.put(grammarAccess.getConditionalExpressionAccess().getGroup_3_1(), "rule__ConditionalExpression__Group_3_1__0");
			builder.put(grammarAccess.getConditionalExpressionAccess().getGroup_4(), "rule__ConditionalExpression__Group_4__0");
			builder.put(grammarAccess.getConditionalExpressionAccess().getGroup_4_2(), "rule__ConditionalExpression__Group_4_2__0");
			builder.put(grammarAccess.getTimeIntervalAccess().getGroup(), "rule__TimeInterval__Group__0");
			builder.put(grammarAccess.getSessionIntervalAccess().getGroup(), "rule__SessionInterval__Group__0");
			builder.put(grammarAccess.getSessionIntervalAccess().getGroup_4(), "rule__SessionInterval__Group_4__0");
			builder.put(grammarAccess.getTimeoutAccess().getGroup(), "rule__Timeout__Group__0");
			builder.put(grammarAccess.getMaxNumberOfOperationAccess().getGroup(), "rule__MaxNumberOfOperation__Group__0");
			builder.put(grammarAccess.getMaxNumberOfOperationAccess().getGroup_3(), "rule__MaxNumberOfOperation__Group_3__0");
			builder.put(grammarAccess.getWeekDaysIntervalAccess().getGroup(), "rule__WeekDaysInterval__Group__0");
			builder.put(grammarAccess.getMessageContentAccess().getGroup(), "rule__MessageContent__Group__0");
			builder.put(grammarAccess.getMessageContentAccess().getGroup_3(), "rule__MessageContent__Group_3__0");
			builder.put(grammarAccess.getMessageContentAccess().getGroup_3_2(), "rule__MessageContent__Group_3_2__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
			builder.put(grammarAccess.getModelAccess().getImportsAssignment_0(), "rule__Model__ImportsAssignment_0");
			builder.put(grammarAccess.getModelAccess().getContractAssignment_1(), "rule__Model__ContractAssignment_1");
			builder.put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
			builder.put(grammarAccess.getContractAccess().getNameAssignment_1(), "rule__Contract__NameAssignment_1");
			builder.put(grammarAccess.getContractAccess().getBeginDateAssignment_7(), "rule__Contract__BeginDateAssignment_7");
			builder.put(grammarAccess.getContractAccess().getDueDateAssignment_10(), "rule__Contract__DueDateAssignment_10");
			builder.put(grammarAccess.getContractAccess().getApplicationAssignment_14(), "rule__Contract__ApplicationAssignment_14");
			builder.put(grammarAccess.getContractAccess().getProcessAssignment_15(), "rule__Contract__ProcessAssignment_15");
			builder.put(grammarAccess.getContractAccess().getVariablesAssignment_17_2(), "rule__Contract__VariablesAssignment_17_2");
			builder.put(grammarAccess.getContractAccess().getClausesAssignment_20(), "rule__Contract__ClausesAssignment_20");
			builder.put(grammarAccess.getClauseAccess().getRolePlayerAssignment_4(), "rule__Clause__RolePlayerAssignment_4");
			builder.put(grammarAccess.getClauseAccess().getOperationAssignment_7(), "rule__Clause__OperationAssignment_7");
			builder.put(grammarAccess.getClauseAccess().getTermsAssignment_10(), "rule__Clause__TermsAssignment_10");
			builder.put(grammarAccess.getClauseAccess().getEventLogAssignment_12(), "rule__Clause__EventLogAssignment_12");
			builder.put(grammarAccess.getRightAccess().getNameAssignment_1(), "rule__Right__NameAssignment_1");
			builder.put(grammarAccess.getObligationAccess().getNameAssignment_1(), "rule__Obligation__NameAssignment_1");
			builder.put(grammarAccess.getProhibitionAccess().getNameAssignment_1(), "rule__Prohibition__NameAssignment_1");
			builder.put(grammarAccess.getApplicationAccess().getNameAssignment_2(), "rule__Application__NameAssignment_2");
			builder.put(grammarAccess.getProcessAccess().getNameAssignment_2(), "rule__Process__NameAssignment_2");
			builder.put(grammarAccess.getOnSuccessAccess().getMessageAssignment_3(), "rule__OnSuccess__MessageAssignment_3");
			builder.put(grammarAccess.getOnBreachAccess().getMessageAssignment_3(), "rule__OnBreach__MessageAssignment_3");
			builder.put(grammarAccess.getExpressionAccess().getSymbolAssignment_1_1_0(), "rule__Expression__SymbolAssignment_1_1_0");
			builder.put(grammarAccess.getExpressionAccess().getSymbolAssignment_1_1_1(), "rule__Expression__SymbolAssignment_1_1_1");
			builder.put(grammarAccess.getExpressionAccess().getRightAssignment_1_2(), "rule__Expression__RightAssignment_1_2");
			builder.put(grammarAccess.getNegationAccess().getSymbolAssignment_1_1(), "rule__Negation__SymbolAssignment_1_1");
			builder.put(grammarAccess.getNegationAccess().getExpressionAssignment_1_2(), "rule__Negation__ExpressionAssignment_1_2");
			builder.put(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_0(), "rule__Comparison__SymbolAssignment_1_1_0");
			builder.put(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_1(), "rule__Comparison__SymbolAssignment_1_1_1");
			builder.put(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_2(), "rule__Comparison__SymbolAssignment_1_1_2");
			builder.put(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_3(), "rule__Comparison__SymbolAssignment_1_1_3");
			builder.put(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_4(), "rule__Comparison__SymbolAssignment_1_1_4");
			builder.put(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_5(), "rule__Comparison__SymbolAssignment_1_1_5");
			builder.put(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_6(), "rule__Comparison__SymbolAssignment_1_1_6");
			builder.put(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_7(), "rule__Comparison__SymbolAssignment_1_1_7");
			builder.put(grammarAccess.getComparisonAccess().getRightAssignment_1_2(), "rule__Comparison__RightAssignment_1_2");
			builder.put(grammarAccess.getPlusAccess().getRightAssignment_1_2(), "rule__Plus__RightAssignment_1_2");
			builder.put(grammarAccess.getFactorAccess().getRightAssignment_1_2(), "rule__Factor__RightAssignment_1_2");
			builder.put(grammarAccess.getNegativeAccess().getExpressionAssignment_1_2(), "rule__Negative__ExpressionAssignment_1_2");
			builder.put(grammarAccess.getNumericValueAccess().getValueAssignment(), "rule__NumericValue__ValueAssignment");
			builder.put(grammarAccess.getStringValueAccess().getValueAssignment(), "rule__StringValue__ValueAssignment");
			builder.put(grammarAccess.getVariableValueAccess().getValueAssignment(), "rule__VariableValue__ValueAssignment");
			builder.put(grammarAccess.getFunctionCallAccess().getNameAssignment_0(), "rule__FunctionCall__NameAssignment_0");
			builder.put(grammarAccess.getFunctionCallAccess().getParamsAssignment_2(), "rule__FunctionCall__ParamsAssignment_2");
			builder.put(grammarAccess.getFunctionCallAccess().getParamsAssignment_3_1(), "rule__FunctionCall__ParamsAssignment_3_1");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment_0(), "rule__Variable__NameAssignment_0");
			builder.put(grammarAccess.getVariableAccess().getExpressionAssignment_2_0(), "rule__Variable__ExpressionAssignment_2_0");
			builder.put(grammarAccess.getVariableAccess().getTermAssignment_2_1(), "rule__Variable__TermAssignment_2_1");
			builder.put(grammarAccess.getTermsAccess().getExpressionTermAssignment_0(), "rule__Terms__ExpressionTermAssignment_0");
			builder.put(grammarAccess.getTermsAccess().getConditionalExpressionAssignment_1(), "rule__Terms__ConditionalExpressionAssignment_1");
			builder.put(grammarAccess.getExpressionTermAccess().getSymbolAssignment_1_1_0(), "rule__ExpressionTerm__SymbolAssignment_1_1_0");
			builder.put(grammarAccess.getExpressionTermAccess().getSymbolAssignment_1_1_1(), "rule__ExpressionTerm__SymbolAssignment_1_1_1");
			builder.put(grammarAccess.getExpressionTermAccess().getRightAssignment_1_2(), "rule__ExpressionTerm__RightAssignment_1_2");
			builder.put(grammarAccess.getNegationTermAccess().getSymbolAssignment_1_1(), "rule__NegationTerm__SymbolAssignment_1_1");
			builder.put(grammarAccess.getNegationTermAccess().getExpressionTermAssignment_1_2(), "rule__NegationTerm__ExpressionTermAssignment_1_2");
			builder.put(grammarAccess.getConditionalExpressionAccess().getBeforeSymbolAssignment_0(), "rule__ConditionalExpression__BeforeSymbolAssignment_0");
			builder.put(grammarAccess.getConditionalExpressionAccess().getComparisonOperatorAssignment_3_1_0(), "rule__ConditionalExpression__ComparisonOperatorAssignment_3_1_0");
			builder.put(grammarAccess.getConditionalExpressionAccess().getLogicalOperatorAssignment_4_0(), "rule__ConditionalExpression__LogicalOperatorAssignment_4_0");
			builder.put(grammarAccess.getConditionalExpressionAccess().getComparisonOperatorAssignment_4_2_0(), "rule__ConditionalExpression__ComparisonOperatorAssignment_4_2_0");
			builder.put(grammarAccess.getConditionalExpressionAccess().getExpressionTermAssignment_8(), "rule__ConditionalExpression__ExpressionTermAssignment_8");
			builder.put(grammarAccess.getConditionalExpressionAccess().getAfterSymbolAssignment_10(), "rule__ConditionalExpression__AfterSymbolAssignment_10");
			builder.put(grammarAccess.getLogicalOperatorAccess().getSymbolAssignment(), "rule__LogicalOperator__SymbolAssignment");
			builder.put(grammarAccess.getTimeIntervalAccess().getStartAssignment_2(), "rule__TimeInterval__StartAssignment_2");
			builder.put(grammarAccess.getTimeIntervalAccess().getEndAssignment_4(), "rule__TimeInterval__EndAssignment_4");
			builder.put(grammarAccess.getSessionIntervalAccess().getFrequencyAssignment_2(), "rule__SessionInterval__FrequencyAssignment_2");
			builder.put(grammarAccess.getSessionIntervalAccess().getTimeUnitAssignment_3(), "rule__SessionInterval__TimeUnitAssignment_3");
			builder.put(grammarAccess.getSessionIntervalAccess().getMessageContentAssignment_4_1_0(), "rule__SessionInterval__MessageContentAssignment_4_1_0");
			builder.put(grammarAccess.getSessionIntervalAccess().getValueAssignment_4_1_1(), "rule__SessionInterval__ValueAssignment_4_1_1");
			builder.put(grammarAccess.getTimeoutAccess().getSecondsAssignment_2(), "rule__Timeout__SecondsAssignment_2");
			builder.put(grammarAccess.getMaxNumberOfOperationAccess().getOperationsNumberAssignment_2(), "rule__MaxNumberOfOperation__OperationsNumberAssignment_2");
			builder.put(grammarAccess.getMaxNumberOfOperationAccess().getTimeUnitAssignment_3_1(), "rule__MaxNumberOfOperation__TimeUnitAssignment_3_1");
			builder.put(grammarAccess.getWeekDaysIntervalAccess().getStartAssignment_2(), "rule__WeekDaysInterval__StartAssignment_2");
			builder.put(grammarAccess.getWeekDaysIntervalAccess().getEndAssignment_4(), "rule__WeekDaysInterval__EndAssignment_4");
			builder.put(grammarAccess.getMessageContentAccess().getContentAssignment_2_0(), "rule__MessageContent__ContentAssignment_2_0");
			builder.put(grammarAccess.getMessageContentAccess().getComparisonOperatorAssignment_3_0(), "rule__MessageContent__ComparisonOperatorAssignment_3_0");
			builder.put(grammarAccess.getMessageContentAccess().getExpressionAssignment_3_1(), "rule__MessageContent__ExpressionAssignment_3_1");
			builder.put(grammarAccess.getMessageContentAccess().getTimeUnitAssignment_3_2_1(), "rule__MessageContent__TimeUnitAssignment_3_2_1");
			builder.put(grammarAccess.getComparisonOperatorAccess().getSymbolAssignment_0(), "rule__ComparisonOperator__SymbolAssignment_0");
			builder.put(grammarAccess.getComparisonOperatorAccess().getSymbolAssignment_1(), "rule__ComparisonOperator__SymbolAssignment_1");
			builder.put(grammarAccess.getComparisonOperatorAccess().getSymbolAssignment_2(), "rule__ComparisonOperator__SymbolAssignment_2");
			builder.put(grammarAccess.getComparisonOperatorAccess().getSymbolAssignment_3(), "rule__ComparisonOperator__SymbolAssignment_3");
			builder.put(grammarAccess.getComparisonOperatorAccess().getSymbolAssignment_4(), "rule__ComparisonOperator__SymbolAssignment_4");
			builder.put(grammarAccess.getComparisonOperatorAccess().getSymbolAssignment_5(), "rule__ComparisonOperator__SymbolAssignment_5");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private JabutiGrammarAccess grammarAccess;

	@Override
	protected InternalJabutiParser createParser() {
		InternalJabutiParser result = new InternalJabutiParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public JabutiGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(JabutiGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
